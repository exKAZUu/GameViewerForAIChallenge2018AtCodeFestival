!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Tile=class{constructor(t,e){this.row=t.row,this.col=t.col,this.value=e}savePosition(){this.previousPosition={row:this.row,col:this.col}}updatePosition(t){this.row=t.row,this.col=t.col}toString(){return this.value?Math.log2(this.value).toString(10):"0"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0);class o{constructor(t,e){this.nbRows=t,this.nbCols=e,this.tiles=o.createEmptyTileBoard(this.nbRows,this.nbCols)}static FROM_STRINGS(t){const e=t.map(t=>t.trim().split(" ").map(t=>parseInt(t,10))),n=e.length,i=e[0].length,s=new o(n,i);for(let t=0;t<n;t++)for(let n=0;n<i;n++)e[t][n]>0&&s.insertTile(new r.Tile({row:t,col:n},Math.pow(2,e[t][n])));return s}static createEmptyTileBoard(t,e){const n=[];for(let o=0;o<t;o++){n[o]=[];for(let t=0;t<e;t++)n[o][t]=new r.Tile({row:o,col:t},void 0)}return n}withinBounds(t){return t.row>=0&&t.row<this.nbRows&&t.col>=0&&t.col<this.nbCols}insertTile(t){this.tiles[t.row][t.col]=t}removeTile(t){this.tiles[t.row][t.col]=new r.Tile({row:t.row,col:t.col},void 0)}tileAt(t){return this.withinBounds(t)&&this.tiles[t.row][t.col].value?this.tiles[t.row][t.col]:void 0}tileAvailable(t){return!this.tileOccupied(t)}getRandomAvailableTile(){const t=this.getAvailableTiles();if(t.length)return t[Math.floor(Math.random()*t.length)]}getAvailableTiles(){const t=[];return this.eachTile((e,n,o)=>{o.value||t.push(new r.Tile({row:e,col:n},void 0))}),t}eachTile(t){for(let e=0;e<this.nbRows;e++)for(let n=0;n<this.nbCols;n++)t(e,n,this.tiles[e][n])}tileOccupied(t){const e=this.tileAt(t);return e?!!e.value:void 0}toString(){return this.tiles.map(t=>t.map(t=>t.toString()).join(" ")).join("\n")}clone(){const t=new o(this.nbRows,this.nbCols);return this.eachTile((e,n,o)=>{o&&o.value&&o.value>0&&t.insertTile(new r.Tile({row:e,col:n},o.value))}),t}}e.Board=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(0),i=n(3);class s{constructor(t,e,n,o){this.nbRows=t,this.nbCols=e,this.board=n||new r.Board(this.nbRows,this.nbCols),this.actuator=o,this.actuate()}static GET_VECTOR(t){switch(t){case i.Direction.Up:return{x:0,y:-1};case i.Direction.Down:return{x:0,y:1};case i.Direction.Left:return{x:-1,y:0};case i.Direction.Right:return{x:1,y:0};default:return{x:0,y:0}}}static positionsEqual(t,e){return t.row===e.row&&t.col===e.col}move(t){const e=s.GET_VECTOR(t),n=this.buildTraversals(e);let r=!1;this.prepareTiles();let i=0,a=0;return n.row.forEach(t=>{n.col.forEach(n=>{const l={row:t,col:n},c=this.board.tileAt(l);if(c&&c.value){const t=this.findFarthestPosition(l,e),n=this.board.tileAt(t.next);if(n&&n.value===c.value&&!n.mergedFrom){const e=new o.Tile(t.next,2*c.value);e.mergedFrom=[c,n],this.board.insertTile(e),this.board.removeTile(c),c.updatePosition(t.next),i++,a+=2*c.value}else this.moveTile(c,t.farthest);s.positionsEqual(l,c)||(r=!0)}})}),r?(this.actuate(),{moved:!0,countMerged:i,scoreObtained:a}):{moved:!1,countMerged:0,scoreObtained:0}}actuate(){this.actuator&&this.actuator.actuate(this.board.tiles)}movesAvailable(){return this.board.getAvailableTiles().length>0||this.tileMatchesAvailable()}toString(){return this.board.toString()}prepareTiles(){this.board.eachTile((t,e,n)=>{n.value&&(n.mergedFrom=void 0,n.savePosition())})}setup(){this.board=new r.Board(this.nbRows,this.nbCols),this.actuate()}buildTraversals(t){const e={row:[],col:[]};for(let t=0;t<this.nbRows;t++)e.row.push(t);for(let t=0;t<this.nbCols;t++)e.col.push(t);return 1===t.x&&(e.col=e.col.reverse()),1===t.y&&(e.row=e.row.reverse()),e}tileMatchesAvailable(){for(let t=0;t<this.nbRows;t++)for(let e=0;e<this.nbCols;e++){const n=this.board.tileAt({row:t,col:e});if(n&&n.value){if(s.directions.some(r=>{const o=s.GET_VECTOR(r),i={row:t+o.y,col:e+o.x},a=this.board.tileAt(i);return!!a&&a.value===n.value}))return!0}}return!1}findFarthestPosition(t,e){let n,r=t;do{r={row:(n=r).row+e.y,col:n.col+e.x}}while(this.board.withinBounds(r)&&this.board.tileAvailable(r));return{farthest:n,next:r}}moveTile(t,e){this.board.removeTile(t),t.updatePosition(e),this.board.insertTile(t)}}s.directions=[i.Direction.Up,i.Direction.Down,i.Direction.Left,i.Direction.Right],e.BoardManager=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.Up="UP",t.Down="DOWN",t.Left="LEFT",t.Right="RIGHT"}(e.Direction||(e.Direction={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(2),i=n(0),s=n(5),a=n(6);n(7);const l=".buttle-2048-viewer",c=5,p=5,f=100,u=1e3,m=1e5,d=[];let b,x,w,h,v,g,T,y=[],E=0,R=[0,0],k=[m,m],O=500,S=[],_=[];function I(){x&&(x.innerText=String(Math.floor((E+1)/2))),S.forEach((t,e)=>{t&&(t.textContent=String(R[e]))}),_.forEach((t,e)=>{t&&(t.textContent=String(Math.round(k[e])))}),T&&(T.value=E.toString(10))}function M(){if(y.length<=E)return void N();const t=y[E];if(console.log(t,t.aiinput,t.aioutput),t.aioutput){const e=t.aioutput.split(" ");if(E<2){const[t,n]=e.map(t=>parseInt(t,10)-1);d[(E+1)%2].board.insertTile(new i.Tile({row:t,col:n},2)),d[(E+1)%2].actuate()}else{const[n,...r]=e,o=s.GameManager.DIRECTIONS_MAP.get(n);if(o){const t=d[E%2].move(o);R[E%2]+=t.scoreObtained}d[(E+1)%2].prepareTiles();const i=s.GameManager.PARSE_ATTACK_COMMAND(r,d[(E+1)%2].board);i.tiles&&(i.tiles.forEach(t=>{d[(E+1)%2].board.insertTile(t)}),d[(E+1)%2].actuate()),t.runtime&&(k[E%2]-=t.runtime)}}I(),E++}function A(){M(),b=window.setTimeout(A,O)}function z(t){if(t>=0&&t<y.length){const e=!!b;if(N(),t<2)d.forEach(t=>{t.setup()}),E=0,R=[0,0],k=[m,m];else{const e=y[t].aiinput;if(e){const n=e.split("\n");d[t%2].board=r.Board.FROM_STRINGS(n.slice(1,c+1)),d[(t+1)%2].board=r.Board.FROM_STRINGS(n.slice(c+1,2*c+1));const[o,i,s,a]=n[0].split(" ").map(t=>parseInt(t,10));if(R=t%2==0?[s,a]:[a,s],k[t%2]=i,2===t)k[1]=m;else{const{aiinput:e,runtime:n}=y[E-1];if(e&&n){const r=parseInt(e.split("\n")[0].split(" ")[1],10);k[(t+1)%2]=r-n}}}d.forEach(t=>{t.prepareTiles(),t.actuate()}),E=t-1}I(),E=t<2?0:t,e&&C()}}function N(){b&&clearTimeout(b),b=void 0,g&&(g.textContent="再生")}function C(){N();let t=0;T&&(T.setAttribute("max",(y.length-1).toString(10)),t=parseInt(T.value,10)+1),z(t),g&&(g.textContent="停止"),b=window.setTimeout(A,O,t)}function L(){N();const t=document.querySelector(`${l} #file-input`);if(!t||!t.files)return;const e=t.files[0],n=new FileReader;n.onload=(()=>{try{y=JSON.parse(n.result),z(0),C()}catch(t){alert("データの準備に失敗しました。\n標準では game.log が該当の出力ファイルです。"),console.log(t)}}),n.readAsText(e,"utf-8")}function D(t,e){const n=document.createElement(t);return n.setAttribute("class",e),n}window.addEventListener("load",()=>{["#player-1 .board-container","#player-2 .board-container"].forEach(t=>{const e=document.querySelector(`${l} ${t}`);if(e){const t=D("div","grid-container");for(let e=0;e<c;e++){const e=D("div","grid-row");for(let t=0;t<p;t++)e.appendChild(D("div","grid-cell"));t.appendChild(e)}e.appendChild(t);const n=D("div","tile-container");e.appendChild(n),d.push(new o.BoardManager(c,p,void 0,new a.HTMLActuator(n)))}}),function(){(x=document.querySelector(`${l} #turn`))&&(x.innerText="0"),(S=[document.querySelector(`${l} #score-1`),document.querySelector(`${l} #score-2`)]).forEach(t=>{t&&(t.innerText="0")}),(_=[document.querySelector(`${l} #time-left-1`),document.querySelector(`${l} #time-left-2`)]).forEach(t=>{t&&(t.innerText="0")}),(w=document.querySelector(`${l} #results`))&&(w.className="results results-hide"),(h=document.querySelector(`${l} #winner`))&&(h.innerText="PLAYER X WINS!"),(v=document.querySelector(`${l} #reason`))&&(v.innerText="UNDEFINED REASON");const t=document.querySelector(`${l} #game-interval-slider`);if(t){const e=t=>u-t*(u-f);t.setAttribute("value",((u-O)/(u-f)).toString()),t.addEventListener("change",t=>{O=e(parseInt(t.target.value,10))})}const e=document.querySelector(`${l} #file-input`);e&&e.addEventListener("change",L);const n=document.querySelector(`${l} #reload-button`);n&&(n.onclick=L),(T=document.querySelector(`${l} #turn-slider`))&&T.addEventListener("change",t=>{z(parseInt(t.target.value,10))}),(g=document.querySelector(`${l} #play-toggle`))&&(g.onclick=(()=>{b?N():C()}));const r=document.querySelector(`${l} #turn-prev`);r&&(r.onclick=(()=>{z(Math.max(E-1,0))}));const o=document.querySelector(`${l} #turn-next`);o&&(o.onclick=M)}(),function(){const t=window.replay;if(!t)return;const e=document.querySelector(`${l} #file-input`);e&&e.remove(),y=t,z(0),C()}()})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(2),o=n(0),i=n(3);class s{constructor(t,e){this.ioLog=[],this.runners=[t,e]}static PARSE_ATTACK_COMMAND(t,e){if(!t.every(s.isPositiveInteger))return{verdict:"NG",reason:"PRESENTATION_ERROR"};const[n,r,...i]=t.map(t=>parseInt(t,10));if(2*n!==i.length||!r)return{verdict:"NG",reason:"PRESENTATION_ERROR"};const a=Math.pow(2,r),l=[];for(let t=0;t<n;t++){const[n,r]=i.slice(2*t,2*t+2),s={row:n-1,col:r-1};if(e.tileOccupied(s))return{verdict:"NG",reason:"INVALID_POSITION"};l.push(new o.Tile(s,a))}return{verdict:"OK",tiles:l}}static isPositiveInteger(t){return s.POSITIVE_REGEXP.test(t)}async gameMain(){const t=[0,0];let e=0;const n=[0,0],i=[s.TOTAL_MAIN_TIME_MS,s.TOTAL_MAIN_TIME_MS],a=[new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS),new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS)],l=(r,o)=>({winner:0===r?"FIRST":"SECOND",reason:o,turn:e,stats:{first:{time:t[0],score:n[0]},second:{time:t[1],score:n[1]}}});for(let e=0;e<2;e++){const n=this.runners[e],r={commands:[e.toString(10)]},i=await n.sendAndReceiveData(r,s.INTIALIZE_TIME_MS);if(console.log(i),this.ioLog.push([r,i]),t[e]+=i.runtimeNs,"OK"!==i.verdict)return"TLE"===i.verdict?l((e+1)%2,"TIME_LIMIT_EXCEEDED"):l((e+1)%2,"RUNTIME_ERROR");const c=(()=>{if(!i.output)return"PRESENTATION_ERROR";const t=i.output.split(" ");if(!t.every(s.isPositiveInteger))return"PRESENTATION_ERROR";const[n,r]=t.map(t=>parseInt(t,10)-1);return a[e].board.withinBounds({row:n,col:r})?(a[(e+1)%2].board.insertTile(new o.Tile({row:n,col:r},2)),null):"INVALID_POSITION"})();if(c)return l((e+1)%2,c)}for(e=1;e<=s.MAX_TURN;e++)for(let r=0;r<2;r++){const o=this.runners[r],c=a[r],p=a[(r+1)%2],f={commands:[`${e} ${Math.round(i[r])} ${n[r]} ${n[(r+1)%2]}`,c.toString(),p.toString()]},u=await o.sendAndReceiveData(f,s.MAIN_TURN_TIME_MS);if(console.log(u),this.ioLog.push([f,u]),t[r]+=u.runtimeNs,"OK"!==u.verdict)return"TLE"===u.verdict?l((r+1)%2,"TIME_LIMIT_EXCEEDED"):l((r+1)%2,"RUNTIME_ERROR");const m=(()=>{if(!u.output)return"PRESENTATION_ERROR";const[t,...e]=u.output.split(" ");if(!t)return"PRESENTATION_ERROR";const o=s.DIRECTIONS_MAP.get(t);if(!o)return"INVALID_DIRECTION";const a=c.move(o);if(!a.moved)return"INVALID_DIRECTION";const l=s.PARSE_ATTACK_COMMAND(e,p.board);if("OK"!==l.verdict||!l.tiles)return l.reason||"PRESENTATION_ERROR";let f=0;for(const t of l.tiles){if(p.board.tileAt({row:t.row,col:t.col}))return"INVALID_PLACE_TO_PUT";p.board.insertTile(t),f+=t.value||0}return f!==Math.pow(2,a.countMerged+1)?"INVALID_VALUE_TO_PUT":(n[r]+=a.scoreObtained,i[r]-=u.runtimeNs/1e3/1e3,null)})();if(m)return l((r+1)%2,m)}return n[0]>n[1]?l(0,"SCORE"):n[1]>n[0]?l(1,"SCORE"):l(1,"EVEN_SCORE")}writeLogsToFile(t){0}}s.DIRECTIONS_MAP=new Map([["U",i.Direction.Up],["D",i.Direction.Down],["R",i.Direction.Right],["L",i.Direction.Left]]),s.BOARD_NUM_ROWS=5,s.BOARD_NUM_COLS=5,s.INTIALIZE_TIME_MS=1e3,s.MAIN_TURN_TIME_MS=1e3,s.TOTAL_MAIN_TIME_MS=1e5,s.MAX_TURN=1e3,s.POSITIVE_REGEXP=/^\+0|[1-9]\d*$/,e.GameManager=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.HTMLActuator=class{constructor(t){this.tileContainer=t}actuate(t){window.requestAnimationFrame(()=>{this.clearContainer(this.tileContainer),t.forEach(t=>{t.forEach(t=>{t&&this.addTile(t)})})})}clearContainer(t){for(;t.firstChild;)t.removeChild(t.firstChild)}addTile(t){if(!t.value)return;const e=document.createElement("div"),n=document.createElement("div"),r=t.previousPosition||{row:t.row,col:t.col},o=this.positionClass(r),i=["tile",`tile-${t.value}`,o];t.value>2048&&i.push("tile-super"),this.applyClasses(e,i),n.classList.add("tile-inner"),n.textContent=t.value.toString(10),t.previousPosition?window.requestAnimationFrame(()=>{i[2]=this.positionClass({row:t.row,col:t.col}),this.applyClasses(e,i)}):t.mergedFrom?(i.push("tile-merged"),this.applyClasses(e,i),t.mergedFrom.forEach(t=>{this.addTile(t)})):(i.push("tile-new"),this.applyClasses(e,i)),e.appendChild(n),this.tileContainer.appendChild(e)}positionClass(t){return`tile-position-${t.col+1}-${t.row+1}`}applyClasses(t,e){t.setAttribute("class",e.join(" "))}}},function(t,e,n){var r=n(8);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(10)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(9)(!1)).push([t.i,".buttle-2048-viewer {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  background: #faf8ef;\n  color: #776e65;\n  line-height: 1;\n  font-size: 10.66667px; }\n  .buttle-2048-viewer * {\n    box-sizing: border-box; }\n  .buttle-2048-viewer div {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    background: transparent;\n    color: inherit;\n    font-size: inherit;\n    font-weight: inherit; }\n  .buttle-2048-viewer .game {\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-grow: 1;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\n    font-weight: bold; }\n  .buttle-2048-viewer .player {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 10.66667px; }\n    .buttle-2048-viewer .player .header {\n      font-size: 16px;\n      margin-bottom: 10.66667px;\n      color: #bbada0; }\n  .buttle-2048-viewer .stats {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 320px;\n    margin-bottom: 53.33333px;\n    font-size: 16px;\n    font-weight: bold; }\n    .buttle-2048-viewer .stats .label {\n      margin-top: 53.33333px;\n      margin-bottom: 10.66667px;\n      color: #bbada0; }\n    .buttle-2048-viewer .stats #turn {\n      font-size: 32px; }\n    .buttle-2048-viewer .stats .score,\n    .buttle-2048-viewer .stats .time-left {\n      display: flex;\n      flex-direction: row;\n      width: 100%;\n      font-size: 32px; }\n      .buttle-2048-viewer .stats .score div,\n      .buttle-2048-viewer .stats .time-left div {\n        flex-basis: 50%;\n        text-align: center; }\n  .buttle-2048-viewer .results {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: absolute;\n    bottom: 21.33333px;\n    z-index: 100;\n    padding: 16px 21.33333px;\n    border-radius: 2.66667px;\n    background-color: rgba(119, 110, 101, 0.95);\n    color: #faf8ef; }\n    .buttle-2048-viewer .results #winner {\n      font-size: 32px; }\n    .buttle-2048-viewer .results #reason {\n      margin-top: 5.33333px;\n      font-size: 16px; }\n  .buttle-2048-viewer .results-show {\n    -webkit-animation: pop 200ms ease 100ms;\n    -moz-animation: pop 200ms ease 100ms;\n    animation: pop 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n  .buttle-2048-viewer .results-hide {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  .buttle-2048-viewer .inputs {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 5.33333px;\n    color: #000; }\n    .buttle-2048-viewer .inputs button,\n    .buttle-2048-viewer .inputs input {\n      margin: 2.66667px;\n      font-size: 10.66667px; }\n    .buttle-2048-viewer .inputs #turn-slider {\n      flex-grow: 1; }\n  .buttle-2048-viewer .board-container {\n    position: relative;\n    padding: 10.66667px;\n    cursor: default;\n    -webkit-touch-callout: none;\n    -ms-touch-callout: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -ms-touch-action: none;\n    touch-action: none;\n    background: #bbada0;\n    border-radius: 5.33333px;\n    width: 426.66667px;\n    height: 426.66667px;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box; }\n  .buttle-2048-viewer .grid-container {\n    position: absolute;\n    z-index: 1; }\n  .buttle-2048-viewer .grid-row {\n    margin-bottom: 10.66667px; }\n    .buttle-2048-viewer .grid-row:last-child {\n      margin-bottom: 0; }\n    .buttle-2048-viewer .grid-row:after {\n      content: '';\n      display: block;\n      clear: both; }\n  .buttle-2048-viewer .grid-cell {\n    width: 72.53333px;\n    height: 72.53333px;\n    margin-right: 10.66667px;\n    float: left;\n    border-radius: 2.66667px;\n    background: rgba(238, 228, 218, 0.35); }\n    .buttle-2048-viewer .grid-cell:last-child {\n      margin-right: 0; }\n  .buttle-2048-viewer .tile-container {\n    position: absolute;\n    z-index: 2; }\n  .buttle-2048-viewer .tile,\n  .buttle-2048-viewer .tile .tile-inner {\n    width: 72.53333px;\n    height: 72.53333px;\n    line-height: 72.53333px; }\n  .buttle-2048-viewer .tile.tile-position-1-1 {\n    -webkit-transform: translate(0px, 0px);\n    -moz-transform: translate(0px, 0px);\n    -ms-transform: translate(0px, 0px);\n    transform: translate(0px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-1-2 {\n    -webkit-transform: translate(0px, 83.2px);\n    -moz-transform: translate(0px, 83.2px);\n    -ms-transform: translate(0px, 83.2px);\n    transform: translate(0px, 83.2px); }\n  .buttle-2048-viewer .tile.tile-position-1-3 {\n    -webkit-transform: translate(0px, 166.4px);\n    -moz-transform: translate(0px, 166.4px);\n    -ms-transform: translate(0px, 166.4px);\n    transform: translate(0px, 166.4px); }\n  .buttle-2048-viewer .tile.tile-position-1-4 {\n    -webkit-transform: translate(0px, 249.6px);\n    -moz-transform: translate(0px, 249.6px);\n    -ms-transform: translate(0px, 249.6px);\n    transform: translate(0px, 249.6px); }\n  .buttle-2048-viewer .tile.tile-position-1-5 {\n    -webkit-transform: translate(0px, 332.8px);\n    -moz-transform: translate(0px, 332.8px);\n    -ms-transform: translate(0px, 332.8px);\n    transform: translate(0px, 332.8px); }\n  .buttle-2048-viewer .tile.tile-position-2-1 {\n    -webkit-transform: translate(83.2px, 0px);\n    -moz-transform: translate(83.2px, 0px);\n    -ms-transform: translate(83.2px, 0px);\n    transform: translate(83.2px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-2-2 {\n    -webkit-transform: translate(83.2px, 83.2px);\n    -moz-transform: translate(83.2px, 83.2px);\n    -ms-transform: translate(83.2px, 83.2px);\n    transform: translate(83.2px, 83.2px); }\n  .buttle-2048-viewer .tile.tile-position-2-3 {\n    -webkit-transform: translate(83.2px, 166.4px);\n    -moz-transform: translate(83.2px, 166.4px);\n    -ms-transform: translate(83.2px, 166.4px);\n    transform: translate(83.2px, 166.4px); }\n  .buttle-2048-viewer .tile.tile-position-2-4 {\n    -webkit-transform: translate(83.2px, 249.6px);\n    -moz-transform: translate(83.2px, 249.6px);\n    -ms-transform: translate(83.2px, 249.6px);\n    transform: translate(83.2px, 249.6px); }\n  .buttle-2048-viewer .tile.tile-position-2-5 {\n    -webkit-transform: translate(83.2px, 332.8px);\n    -moz-transform: translate(83.2px, 332.8px);\n    -ms-transform: translate(83.2px, 332.8px);\n    transform: translate(83.2px, 332.8px); }\n  .buttle-2048-viewer .tile.tile-position-3-1 {\n    -webkit-transform: translate(166.4px, 0px);\n    -moz-transform: translate(166.4px, 0px);\n    -ms-transform: translate(166.4px, 0px);\n    transform: translate(166.4px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-3-2 {\n    -webkit-transform: translate(166.4px, 83.2px);\n    -moz-transform: translate(166.4px, 83.2px);\n    -ms-transform: translate(166.4px, 83.2px);\n    transform: translate(166.4px, 83.2px); }\n  .buttle-2048-viewer .tile.tile-position-3-3 {\n    -webkit-transform: translate(166.4px, 166.4px);\n    -moz-transform: translate(166.4px, 166.4px);\n    -ms-transform: translate(166.4px, 166.4px);\n    transform: translate(166.4px, 166.4px); }\n  .buttle-2048-viewer .tile.tile-position-3-4 {\n    -webkit-transform: translate(166.4px, 249.6px);\n    -moz-transform: translate(166.4px, 249.6px);\n    -ms-transform: translate(166.4px, 249.6px);\n    transform: translate(166.4px, 249.6px); }\n  .buttle-2048-viewer .tile.tile-position-3-5 {\n    -webkit-transform: translate(166.4px, 332.8px);\n    -moz-transform: translate(166.4px, 332.8px);\n    -ms-transform: translate(166.4px, 332.8px);\n    transform: translate(166.4px, 332.8px); }\n  .buttle-2048-viewer .tile.tile-position-4-1 {\n    -webkit-transform: translate(249.6px, 0px);\n    -moz-transform: translate(249.6px, 0px);\n    -ms-transform: translate(249.6px, 0px);\n    transform: translate(249.6px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-4-2 {\n    -webkit-transform: translate(249.6px, 83.2px);\n    -moz-transform: translate(249.6px, 83.2px);\n    -ms-transform: translate(249.6px, 83.2px);\n    transform: translate(249.6px, 83.2px); }\n  .buttle-2048-viewer .tile.tile-position-4-3 {\n    -webkit-transform: translate(249.6px, 166.4px);\n    -moz-transform: translate(249.6px, 166.4px);\n    -ms-transform: translate(249.6px, 166.4px);\n    transform: translate(249.6px, 166.4px); }\n  .buttle-2048-viewer .tile.tile-position-4-4 {\n    -webkit-transform: translate(249.6px, 249.6px);\n    -moz-transform: translate(249.6px, 249.6px);\n    -ms-transform: translate(249.6px, 249.6px);\n    transform: translate(249.6px, 249.6px); }\n  .buttle-2048-viewer .tile.tile-position-4-5 {\n    -webkit-transform: translate(249.6px, 332.8px);\n    -moz-transform: translate(249.6px, 332.8px);\n    -ms-transform: translate(249.6px, 332.8px);\n    transform: translate(249.6px, 332.8px); }\n  .buttle-2048-viewer .tile.tile-position-5-1 {\n    -webkit-transform: translate(332.8px, 0px);\n    -moz-transform: translate(332.8px, 0px);\n    -ms-transform: translate(332.8px, 0px);\n    transform: translate(332.8px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-5-2 {\n    -webkit-transform: translate(332.8px, 83.2px);\n    -moz-transform: translate(332.8px, 83.2px);\n    -ms-transform: translate(332.8px, 83.2px);\n    transform: translate(332.8px, 83.2px); }\n  .buttle-2048-viewer .tile.tile-position-5-3 {\n    -webkit-transform: translate(332.8px, 166.4px);\n    -moz-transform: translate(332.8px, 166.4px);\n    -ms-transform: translate(332.8px, 166.4px);\n    transform: translate(332.8px, 166.4px); }\n  .buttle-2048-viewer .tile.tile-position-5-4 {\n    -webkit-transform: translate(332.8px, 249.6px);\n    -moz-transform: translate(332.8px, 249.6px);\n    -ms-transform: translate(332.8px, 249.6px);\n    transform: translate(332.8px, 249.6px); }\n  .buttle-2048-viewer .tile.tile-position-5-5 {\n    -webkit-transform: translate(332.8px, 332.8px);\n    -moz-transform: translate(332.8px, 332.8px);\n    -ms-transform: translate(332.8px, 332.8px);\n    transform: translate(332.8px, 332.8px); }\n  .buttle-2048-viewer .tile {\n    position: absolute;\n    -webkit-transition: 100ms ease-in-out;\n    -moz-transition: 100ms ease-in-out;\n    transition: 100ms ease-in-out;\n    -webkit-transition-property: -webkit-transform;\n    -moz-transition-property: -moz-transform;\n    transition-property: transform; }\n    .buttle-2048-viewer .tile .tile-inner {\n      border-radius: 2.66667px;\n      background: #eee4da;\n      text-align: center;\n      font-weight: bold;\n      z-index: 10; }\n    .buttle-2048-viewer .tile.tile-2 .tile-inner {\n      background: #eee4da;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-4 .tile-inner {\n      background: #eee1c9;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-8 .tile-inner {\n      color: #f9f6f2;\n      background: #f3b27a;\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-16 .tile-inner {\n      color: #f9f6f2;\n      background: #f69664;\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-32 .tile-inner {\n      color: #f9f6f2;\n      background: #f77c5f;\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-64 .tile-inner {\n      color: #f9f6f2;\n      background: #f75f3b;\n      font-size: 48.35556px; }\n    .buttle-2048-viewer .tile.tile-128 .tile-inner {\n      color: #f9f6f2;\n      background: #edd073;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.138889), inset 0 0 0 1px rgba(255, 255, 255, 0.0833333);\n      font-size: 36.26667px; }\n    .buttle-2048-viewer .tile.tile-256 .tile-inner {\n      color: #f9f6f2;\n      background: #edcc62;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.185185), inset 0 0 0 1px rgba(255, 255, 255, 0.111111);\n      font-size: 36.26667px; }\n    .buttle-2048-viewer .tile.tile-512 .tile-inner {\n      color: #f9f6f2;\n      background: #edc950;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.231481), inset 0 0 0 1px rgba(255, 255, 255, 0.138889);\n      font-size: 36.26667px; }\n    .buttle-2048-viewer .tile.tile-1024 .tile-inner {\n      color: #f9f6f2;\n      background: #edc53f;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.277778), inset 0 0 0 1px rgba(255, 255, 255, 0.166667);\n      font-size: 29.01333px; }\n    .buttle-2048-viewer .tile.tile-2048 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.324074), inset 0 0 0 1px rgba(255, 255, 255, 0.194444);\n      font-size: 29.01333px; }\n    .buttle-2048-viewer .tile.tile-4096 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.37037), inset 0 0 0 1px rgba(255, 255, 255, 0.222222);\n      font-size: 29.01333px; }\n    .buttle-2048-viewer .tile.tile-8192 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.416667), inset 0 0 0 1px rgba(255, 255, 255, 0.25);\n      font-size: 29.01333px; }\n    .buttle-2048-viewer .tile.tile-16384 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.462963), inset 0 0 0 1px rgba(255, 255, 255, 0.277778);\n      font-size: 24.17778px; }\n    .buttle-2048-viewer .tile.tile-32768 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.509259), inset 0 0 0 1px rgba(255, 255, 255, 0.305556);\n      font-size: 24.17778px; }\n    .buttle-2048-viewer .tile.tile-65536 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.555556), inset 0 0 0 1px rgba(255, 255, 255, 0.333333);\n      font-size: 24.17778px; }\n    .buttle-2048-viewer .tile.tile-super .tile-inner {\n      color: #f9f6f2;\n      background: #3c3a33;\n      font-size: 30px; }\n\n@-webkit-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n  .buttle-2048-viewer .tile-new .tile-inner {\n    -webkit-animation: appear 200ms ease 100ms;\n    -moz-animation: appear 200ms ease 100ms;\n    animation: appear 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n\n@-webkit-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n  .buttle-2048-viewer .tile-merged .tile-inner {\n    z-index: 20;\n    -webkit-animation: pop 200ms ease 100ms;\n    -moz-animation: pop 200ms ease 100ms;\n    animation: pop 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),s=null,a=0,l=[],c=n(11);function p(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(x(o.parts[s],e))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(x(o.parts[s],e));r[o.id]={id:o.id,refs:1,parts:a}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function u(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,n);n.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return b(e,t.attrs),u(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function x(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var l=a++;n=s||(s=d(e)),r=h.bind(null,n,l,!1),o=h.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),u(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=d(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return p(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var s=n[i];(a=r[s.id]).refs--,o.push(a)}t&&p(f(t,e),e);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var w=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function h(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,