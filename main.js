!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=4)}([function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.Tile=class{constructor(t,n){this.row=t.row,this.col=t.col,this.value=n}savePosition(){this.previousPosition={row:this.row,col:this.col}}updatePosition(t){this.row=t.row,this.col=t.col}toString(){return this.value?Math.log2(this.value).toString(10):"0"}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(0);class o{constructor(t,n){this.nbRows=t,this.nbCols=n,this.tiles=o.createEmptyTileBoard(this.nbRows,this.nbCols)}static FROM_STRINGS(t){const n=t.map(t=>t.trim().split(" ").map(t=>parseInt(t,10))),e=n.length,i=n[0].length,s=new o(e,i);for(let t=0;t<e;t++)for(let e=0;e<i;e++)n[t][e]>0&&s.insertTile(new r.Tile({row:t,col:e},Math.pow(2,n[t][e])));return s}static createEmptyTileBoard(t,n){const e=[];for(let o=0;o<t;o++){e[o]=[];for(let t=0;t<n;t++)e[o][t]=new r.Tile({row:o,col:t},void 0)}return e}withinBounds(t){return t.row>=0&&t.row<this.nbRows&&t.col>=0&&t.col<this.nbCols}insertTile(t){this.tiles[t.row][t.col]=t}removeTile(t){this.tiles[t.row][t.col]=new r.Tile({row:t.row,col:t.col},void 0)}tileAt(t){return this.withinBounds(t)&&this.tiles[t.row][t.col].value?this.tiles[t.row][t.col]:void 0}tileAvailable(t){return!this.tileOccupied(t)}getRandomAvailableTile(){const t=this.getAvailableTiles();if(t.length)return t[Math.floor(Math.random()*t.length)]}getAvailableTiles(){const t=[];return this.eachTile((n,e,o)=>{o.value||t.push(new r.Tile({row:n,col:e},void 0))}),t}eachTile(t){for(let n=0;n<this.nbRows;n++)for(let e=0;e<this.nbCols;e++)t(n,e,this.tiles[n][e])}tileOccupied(t){const n=this.tileAt(t);return n?!!n.value:void 0}toString(){return this.tiles.map(t=>t.map(t=>t.toString()).join(" ")).join("\n")}clone(){const t=new o(this.nbRows,this.nbCols);return this.eachTile((n,e,o)=>{o&&o.value&&o.value>0&&t.insertTile(new r.Tile({row:n,col:e},o.value))}),t}}n.Board=o},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(1),o=e(0),i=e(3);class s{constructor(t,n,e,o){this.nbRows=t,this.nbCols=n,this.board=e||new r.Board(this.nbRows,this.nbCols),this.actuator=o,this.actuate()}static GET_VECTOR(t){switch(t){case i.Direction.Up:return{x:0,y:-1};case i.Direction.Down:return{x:0,y:1};case i.Direction.Left:return{x:-1,y:0};case i.Direction.Right:return{x:1,y:0};default:return{x:0,y:0}}}static positionsEqual(t,n){return t.row===n.row&&t.col===n.col}move(t){const n=s.GET_VECTOR(t),e=this.buildTraversals(n);let r=!1;this.prepareTiles();let i=0,a=0;return e.row.forEach(t=>{e.col.forEach(e=>{const l={row:t,col:e},c=this.board.tileAt(l);if(c&&c.value){const t=this.findFarthestPosition(l,n),e=this.board.tileAt(t.next);if(e&&e.value===c.value&&!e.mergedFrom){const n=new o.Tile(t.next,2*c.value);n.mergedFrom=[c,e],this.board.insertTile(n),this.board.removeTile(c),c.updatePosition(t.next),i++,a+=2*c.value}else this.moveTile(c,t.farthest);s.positionsEqual(l,c)||(r=!0)}})}),r?(this.actuate(),{moved:!0,countMerged:i,scoreObtained:a}):{moved:!1,countMerged:0,scoreObtained:0}}actuate(){this.actuator&&this.actuator.actuate(this.board.tiles)}movesAvailable(){return this.board.getAvailableTiles().length>0||this.tileMatchesAvailable()}toString(){return this.board.toString()}prepareTiles(){this.board.eachTile((t,n,e)=>{e.value&&(e.mergedFrom=void 0,e.savePosition())})}setup(){this.board=new r.Board(this.nbRows,this.nbCols),this.actuate()}buildTraversals(t){const n={row:[],col:[]};for(let t=0;t<this.nbRows;t++)n.row.push(t);for(let t=0;t<this.nbCols;t++)n.col.push(t);return 1===t.x&&(n.col=n.col.reverse()),1===t.y&&(n.row=n.row.reverse()),n}tileMatchesAvailable(){for(let t=0;t<this.nbRows;t++)for(let n=0;n<this.nbCols;n++){const e=this.board.tileAt({row:t,col:n});if(e&&e.value){if(s.directions.some(r=>{const o=s.GET_VECTOR(r),i={row:t+o.y,col:n+o.x},a=this.board.tileAt(i);return!!a&&a.value===e.value}))return!0}}return!1}findFarthestPosition(t,n){let e,r=t;do{r={row:(e=r).row+n.y,col:e.col+n.x}}while(this.board.withinBounds(r)&&this.board.tileAvailable(r));return{farthest:e,next:r}}moveTile(t,n){this.board.removeTile(t),t.updatePosition(n),this.board.insertTile(t)}}s.directions=[i.Direction.Up,i.Direction.Down,i.Direction.Left,i.Direction.Right],n.BoardManager=s},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(t){t.Up="UP",t.Down="DOWN",t.Left="LEFT",t.Right="RIGHT"}(n.Direction||(n.Direction={}))},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(1),o=e(2),i=e(0),s=e(5),a=e(6);e(7);const l=5,c=5,f=[];let h,m,u,v,d=[],p=0,b=800;function w(){m&&(m.innerText=String(Math.floor(p/2))),v&&(v.value=p.toString(10))}function g(){if(d.length<=p)return void x();w();const t=d[p];if(console.log(t,t.aiinput,t.aioutput),t.aioutput){const n=t.aioutput.split(" ");if(p<2){const[t,e]=n.map(t=>parseInt(t,10)-1);f[(p+1)%2].board.insertTile(new i.Tile({row:t,col:e},2)),f[(p+1)%2].actuate()}else{const[t,...e]=n,r=s.GameManager.DIRECTIONS_MAP.get(t);r&&f[p%2].move(r),f[(p+1)%2].prepareTiles();const o=s.GameManager.PARSE_ATTACK_COMMAND(e,f[(p+1)%2].board);o.tiles&&(o.tiles.forEach(t=>{f[(p+1)%2].board.insertTile(t)}),f[(p+1)%2].actuate())}}p++}function T(){g(),h=window.setTimeout(T,b)}function y(t){if(t>=0&&t<d.length){const n=d[t].aiinput,e=!!h;x(),t<2?(f.forEach(t=>{t.setup()}),p=0):(n&&(f[t%2].board=r.Board.FROM_STRINGS(n.split("\n").slice(1,l+1)),f[(t+1)%2].board=r.Board.FROM_STRINGS(n.split("\n").slice(l+1,2*l+1))),f.forEach(t=>{t.actuate()}),p=t),w(),e&&E()}}function x(){h&&clearTimeout(h),h=void 0,u&&(u.textContent="再生")}function E(){x();let t=0;v&&(v.setAttribute("max",(d.length-1).toString(10)),t=parseInt(v.value,10)),y(t),u&&(u.textContent="停止"),h=window.setTimeout(T,b,t)}function R(){x();const t=document.getElementById("file");if(!t||!t.files)return;const n=t.files[0],e=new FileReader;e.onload=(()=>{try{d=JSON.parse(e.result),y(0),E()}catch(t){alert("データの準備に失敗しました。\n標準では game.log が該当の出力ファイルです。"),console.log(t)}}),e.readAsText(n,"utf-8")}function k(t,n){const e=document.createElement(t);return e.setAttribute("class",n),e}window.addEventListener("load",()=>{["#frame1 .game-container","#frame2 .game-container"].forEach(t=>{const n=document.querySelector(t);if(n){const t=k("div","grid-container");for(let n=0;n<l;n++){const n=k("div","grid-row");for(let t=0;t<c;t++)n.appendChild(k("div","grid-cell"));t.appendChild(n)}n.appendChild(t);const e=k("div","tile-container");n.appendChild(e),f.push(new o.BoardManager(l,c,void 0,new a.HTMLActuator(e)))}}),function(){const t=document.getElementById("game-interval-slider");t&&(t.setAttribute("value",b.toString()),t.addEventListener("change",t=>{b=parseInt(t.target.value,10)}));const n=document.getElementById("file");n&&n.addEventListener("change",R);const e=document.getElementById("restart-button");e&&(e.onclick=R),(m=document.getElementById("turn"))&&(m.innerText="0"),(v=document.getElementById("frame-slider"))&&v.addEventListener("change",t=>{y(parseInt(t.target.value,10))}),(u=document.getElementById("play-toggle"))&&(u.onclick=(()=>{h?x():E()}));const r=document.getElementById("frame-prev");r&&(r.onclick=(()=>{y(Math.max(p-1,0))}));const o=document.getElementById("frame-next");o&&(o.onclick=g)}(),function(){const t=window.replay;if(!t)return;const n=document.getElementById("file");n&&n.remove();const e=document.getElementById("restart-button");e&&e.remove(),d=t,y(0),E()}()})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(2),o=e(0),i=e(3);class s{constructor(t,n){this.ioLog=[],this.runners=[t,n]}static PARSE_ATTACK_COMMAND(t,n){if(!t.every(s.isPositiveInteger))return{verdict:"NG",reason:"PRESENTATION_ERROR"};const[e,r,...i]=t.map(t=>parseInt(t,10));if(2*e!==i.length||!r)return{verdict:"NG",reason:"PRESENTATION_ERROR"};const a=Math.pow(2,r),l=[];for(let t=0;t<e;t++){const[e,r]=i.slice(2*t,2*t+2),s={row:e-1,col:r-1};if(n.tileOccupied(s))return{verdict:"NG",reason:"INVALID_POSITION"};l.push(new o.Tile(s,a))}return{verdict:"OK",tiles:l}}static isPositiveInteger(t){return s.POSITIVE_REGEXP.test(t)}async gameMain(){const t=[0,0];let n=0;const e=[0,0],i=[new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS),new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS)],a=(r,o)=>({winner:0===r?"FIRST":"SECOND",reason:o,turn:n,stats:{first:{time:t[0],score:e[0]},second:{time:t[1],score:e[1]}}});for(let n=0;n<2;n++){const e=this.runners[n],r={commands:[n.toString(10)]},l=await e.sendAndReceiveData(r,s.INTIALIZE_TIME_MS);if(console.log(l),this.ioLog.push([r,l]),t[n]+=l.runtimeNs,"OK"!==l.verdict)return"TLE"===l.verdict?a((n+1)%2,"TIME_LIMIT_EXCEEDED"):a((n+1)%2,"RUNTIME_ERROR");const c=(()=>{if(!l.output)return"PRESENTATION_ERROR";const t=l.output.split(" ");if(!t.every(s.isPositiveInteger))return"PRESENTATION_ERROR";const[e,r]=t.map(t=>parseInt(t,10)-1);return i[n].board.withinBounds({row:e,col:r})?(i[(n+1)%2].board.insertTile(new o.Tile({row:e,col:r},2)),null):"INVALID_POSITION"})();if(c)return a((n+1)%2,c)}for(n=1;n<=s.MAX_TURN;n++)for(let r=0;r<2;r++){const o=this.runners[r],l=i[r],c=i[(r+1)%2],f={commands:[`${n} ${e[r]} ${e[(r+1)%2]}`,l.toString(),c.toString()]},h=await o.sendAndReceiveData(f,s.MAIN_TURN_TIME_MS);if(console.log(h),this.ioLog.push([f,h]),t[r]+=h.runtimeNs,"OK"!==h.verdict)return"TLE"===h.verdict?a((r+1)%2,"TIME_LIMIT_EXCEEDED"):a((r+1)%2,"RUNTIME_ERROR");const m=(()=>{if(!h.output)return"PRESENTATION_ERROR";const[t,...n]=h.output.split(" ");if(!t)return"PRESENTATION_ERROR";const o=s.DIRECTIONS_MAP.get(t);if(!o)return"INVALID_DIRECTION";const i=l.move(o);if(!i.moved)return"INVALID_DIRECTION";const a=s.PARSE_ATTACK_COMMAND(n,c.board);if("OK"!==a.verdict||!a.tiles)return a.reason||"PRESENTATION_ERROR";let f=0;for(const t of a.tiles){if(c.board.tileAt({row:t.row,col:t.col}))return"INVALID_PLACE_TO_PUT";c.board.insertTile(t),f+=t.value||0}return f!==Math.pow(2,i.countMerged+1)?"INVALID_VALUE_TO_PUT":(e[r]+=i.scoreObtained,null)})();if(m)return a((r+1)%2,m)}return e[0]>e[1]?a(0,"SCORE"):e[1]>e[0]?a(1,"SCORE"):a(1,"EVEN_SCORE")}writeLogsToFile(t){0}}s.DIRECTIONS_MAP=new Map([["U",i.Direction.Up],["D",i.Direction.Down],["R",i.Direction.Right],["L",i.Direction.Left]]),s.BOARD_NUM_ROWS=5,s.BOARD_NUM_COLS=5,s.INTIALIZE_TIME_MS=500,s.MAIN_TURN_TIME_MS=100,s.MAX_TURN=1e3,s.POSITIVE_REGEXP=/^\+0|[1-9]\d*$/,n.GameManager=s},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.HTMLActuator=class{constructor(t){this.tileContainer=t}actuate(t){window.requestAnimationFrame(()=>{this.clearContainer(this.tileContainer),t.forEach(t=>{t.forEach(t=>{t&&this.addTile(t)})})})}clearContainer(t){for(;t.firstChild;)t.removeChild(t.firstChild)}addTile(t){if(!t.value)return;const n=document.createElement("div"),e=document.createElement("div"),r=t.previousPosition||{row:t.row,col:t.col},o=this.positionClass(r),i=["tile",`tile-${t.value}`,o];t.value>2048&&i.push("tile-super"),this.applyClasses(n,i),e.classList.add("tile-inner"),e.textContent=t.value.toString(10),t.previousPosition?window.requestAnimationFrame(()=>{i[2]=this.positionClass({row:t.row,col:t.col}),this.applyClasses(n,i)}):t.mergedFrom?(i.push("tile-merged"),this.applyClasses(n,i),t.mergedFrom.forEach(t=>{this.addTile(t)})):(i.push("tile-new"),this.applyClasses(n,i)),n.appendChild(e),this.tileContainer.appendChild(n)}positionClass(t){return`tile-position-${t.col+1}-${t.row+1}`}applyClasses(t,n){t.setAttribute("class",n.join(" "))}}},function(t,n,e){var r=e(8);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(10)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(9)(!1)).push([t.i,"* {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  background: #faf8ef;\n  color: #776e65;\n  font-size: 1.66667vh; }\n\n#app {\n  height: 100vh;\n  width: 100vw;\n  flex-direction: column;\n  display: flex;\n  overflow: hidden; }\n\n#body {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif; }\n\n#stats {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 250px;\n  font-size: 1.5rem;\n  font-weight: bold; }\n  #stats #turn {\n    font-size: 4rem; }\n\n#controls {\n  padding: 0.83333vh;\n  border-top: 1px solid #eee;\n  background: #fff;\n  color: #000; }\n  #controls div {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    overflow: hidden; }\n  #controls button,\n  #controls input {\n    margin: 0.83333vh;\n    font-size: 1.66667vh; }\n\n.game-container {\n  position: relative;\n  padding: 1.66667vh;\n  cursor: default;\n  -webkit-touch-callout: none;\n  -ms-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -ms-touch-action: none;\n  touch-action: none;\n  background: #bbada0;\n  border-radius: 0.83333vh;\n  width: 66.66667vh;\n  height: 66.66667vh;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.grid-container {\n  position: absolute;\n  z-index: 1; }\n\n.grid-row {\n  margin-bottom: 1.66667vh; }\n  .grid-row:last-child {\n    margin-bottom: 0; }\n  .grid-row:after {\n    content: '';\n    display: block;\n    clear: both; }\n\n.grid-cell {\n  width: 11.33333vh;\n  height: 11.33333vh;\n  margin-right: 1.66667vh;\n  float: left;\n  border-radius: 0.41667vh;\n  background: rgba(238, 228, 218, 0.35); }\n  .grid-cell:last-child {\n    margin-right: 0; }\n\n.tile-container {\n  position: absolute;\n  z-index: 2; }\n\n.tile,\n.tile .tile-inner {\n  width: 11.33333vh;\n  height: 11.33333vh;\n  line-height: 11.33333vh; }\n\n.tile.tile-position-1-1 {\n  -webkit-transform: translate(0vh, 0vh);\n  -moz-transform: translate(0vh, 0vh);\n  -ms-transform: translate(0vh, 0vh);\n  transform: translate(0vh, 0vh); }\n\n.tile.tile-position-1-2 {\n  -webkit-transform: translate(0vh, 13vh);\n  -moz-transform: translate(0vh, 13vh);\n  -ms-transform: translate(0vh, 13vh);\n  transform: translate(0vh, 13vh); }\n\n.tile.tile-position-1-3 {\n  -webkit-transform: translate(0vh, 26vh);\n  -moz-transform: translate(0vh, 26vh);\n  -ms-transform: translate(0vh, 26vh);\n  transform: translate(0vh, 26vh); }\n\n.tile.tile-position-1-4 {\n  -webkit-transform: translate(0vh, 39vh);\n  -moz-transform: translate(0vh, 39vh);\n  -ms-transform: translate(0vh, 39vh);\n  transform: translate(0vh, 39vh); }\n\n.tile.tile-position-1-5 {\n  -webkit-transform: translate(0vh, 52vh);\n  -moz-transform: translate(0vh, 52vh);\n  -ms-transform: translate(0vh, 52vh);\n  transform: translate(0vh, 52vh); }\n\n.tile.tile-position-2-1 {\n  -webkit-transform: translate(13vh, 0vh);\n  -moz-transform: translate(13vh, 0vh);\n  -ms-transform: translate(13vh, 0vh);\n  transform: translate(13vh, 0vh); }\n\n.tile.tile-position-2-2 {\n  -webkit-transform: translate(13vh, 13vh);\n  -moz-transform: translate(13vh, 13vh);\n  -ms-transform: translate(13vh, 13vh);\n  transform: translate(13vh, 13vh); }\n\n.tile.tile-position-2-3 {\n  -webkit-transform: translate(13vh, 26vh);\n  -moz-transform: translate(13vh, 26vh);\n  -ms-transform: translate(13vh, 26vh);\n  transform: translate(13vh, 26vh); }\n\n.tile.tile-position-2-4 {\n  -webkit-transform: translate(13vh, 39vh);\n  -moz-transform: translate(13vh, 39vh);\n  -ms-transform: translate(13vh, 39vh);\n  transform: translate(13vh, 39vh); }\n\n.tile.tile-position-2-5 {\n  -webkit-transform: translate(13vh, 52vh);\n  -moz-transform: translate(13vh, 52vh);\n  -ms-transform: translate(13vh, 52vh);\n  transform: translate(13vh, 52vh); }\n\n.tile.tile-position-3-1 {\n  -webkit-transform: translate(26vh, 0vh);\n  -moz-transform: translate(26vh, 0vh);\n  -ms-transform: translate(26vh, 0vh);\n  transform: translate(26vh, 0vh); }\n\n.tile.tile-position-3-2 {\n  -webkit-transform: translate(26vh, 13vh);\n  -moz-transform: translate(26vh, 13vh);\n  -ms-transform: translate(26vh, 13vh);\n  transform: translate(26vh, 13vh); }\n\n.tile.tile-position-3-3 {\n  -webkit-transform: translate(26vh, 26vh);\n  -moz-transform: translate(26vh, 26vh);\n  -ms-transform: translate(26vh, 26vh);\n  transform: translate(26vh, 26vh); }\n\n.tile.tile-position-3-4 {\n  -webkit-transform: translate(26vh, 39vh);\n  -moz-transform: translate(26vh, 39vh);\n  -ms-transform: translate(26vh, 39vh);\n  transform: translate(26vh, 39vh); }\n\n.tile.tile-position-3-5 {\n  -webkit-transform: translate(26vh, 52vh);\n  -moz-transform: translate(26vh, 52vh);\n  -ms-transform: translate(26vh, 52vh);\n  transform: translate(26vh, 52vh); }\n\n.tile.tile-position-4-1 {\n  -webkit-transform: translate(39vh, 0vh);\n  -moz-transform: translate(39vh, 0vh);\n  -ms-transform: translate(39vh, 0vh);\n  transform: translate(39vh, 0vh); }\n\n.tile.tile-position-4-2 {\n  -webkit-transform: translate(39vh, 13vh);\n  -moz-transform: translate(39vh, 13vh);\n  -ms-transform: translate(39vh, 13vh);\n  transform: translate(39vh, 13vh); }\n\n.tile.tile-position-4-3 {\n  -webkit-transform: translate(39vh, 26vh);\n  -moz-transform: translate(39vh, 26vh);\n  -ms-transform: translate(39vh, 26vh);\n  transform: translate(39vh, 26vh); }\n\n.tile.tile-position-4-4 {\n  -webkit-transform: translate(39vh, 39vh);\n  -moz-transform: translate(39vh, 39vh);\n  -ms-transform: translate(39vh, 39vh);\n  transform: translate(39vh, 39vh); }\n\n.tile.tile-position-4-5 {\n  -webkit-transform: translate(39vh, 52vh);\n  -moz-transform: translate(39vh, 52vh);\n  -ms-transform: translate(39vh, 52vh);\n  transform: translate(39vh, 52vh); }\n\n.tile.tile-position-5-1 {\n  -webkit-transform: translate(52vh, 0vh);\n  -moz-transform: translate(52vh, 0vh);\n  -ms-transform: translate(52vh, 0vh);\n  transform: translate(52vh, 0vh); }\n\n.tile.tile-position-5-2 {\n  -webkit-transform: translate(52vh, 13vh);\n  -moz-transform: translate(52vh, 13vh);\n  -ms-transform: translate(52vh, 13vh);\n  transform: translate(52vh, 13vh); }\n\n.tile.tile-position-5-3 {\n  -webkit-transform: translate(52vh, 26vh);\n  -moz-transform: translate(52vh, 26vh);\n  -ms-transform: translate(52vh, 26vh);\n  transform: translate(52vh, 26vh); }\n\n.tile.tile-position-5-4 {\n  -webkit-transform: translate(52vh, 39vh);\n  -moz-transform: translate(52vh, 39vh);\n  -ms-transform: translate(52vh, 39vh);\n  transform: translate(52vh, 39vh); }\n\n.tile.tile-position-5-5 {\n  -webkit-transform: translate(52vh, 52vh);\n  -moz-transform: translate(52vh, 52vh);\n  -ms-transform: translate(52vh, 52vh);\n  transform: translate(52vh, 52vh); }\n\n.tile {\n  position: absolute;\n  -webkit-transition: 100ms ease-in-out;\n  -moz-transition: 100ms ease-in-out;\n  transition: 100ms ease-in-out;\n  -webkit-transition-property: -webkit-transform;\n  -moz-transition-property: -moz-transform;\n  transition-property: transform; }\n  .tile .tile-inner {\n    border-radius: 0.41667vh;\n    background: #eee4da;\n    text-align: center;\n    font-weight: bold;\n    z-index: 10; }\n  .tile.tile-2 .tile-inner {\n    background: #eee4da;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n    font-size: 7.55556vh; }\n  .tile.tile-4 .tile-inner {\n    background: #eee1c9;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n    font-size: 7.55556vh; }\n  .tile.tile-8 .tile-inner {\n    color: #f9f6f2;\n    background: #f3b27a;\n    font-size: 7.55556vh; }\n  .tile.tile-16 .tile-inner {\n    color: #f9f6f2;\n    background: #f69664;\n    font-size: 7.55556vh; }\n  .tile.tile-32 .tile-inner {\n    color: #f9f6f2;\n    background: #f77c5f;\n    font-size: 7.55556vh; }\n  .tile.tile-64 .tile-inner {\n    color: #f9f6f2;\n    background: #f75f3b;\n    font-size: 7.55556vh; }\n  .tile.tile-128 .tile-inner {\n    color: #f9f6f2;\n    background: #edd073;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.138889), inset 0 0 0 1px rgba(255, 255, 255, 0.0833333);\n    font-size: 5.66667vh; }\n  .tile.tile-256 .tile-inner {\n    color: #f9f6f2;\n    background: #edcc62;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.185185), inset 0 0 0 1px rgba(255, 255, 255, 0.111111);\n    font-size: 5.66667vh; }\n  .tile.tile-512 .tile-inner {\n    color: #f9f6f2;\n    background: #edc950;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.231481), inset 0 0 0 1px rgba(255, 255, 255, 0.138889);\n    font-size: 5.66667vh; }\n  .tile.tile-1024 .tile-inner {\n    color: #f9f6f2;\n    background: #edc53f;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.277778), inset 0 0 0 1px rgba(255, 255, 255, 0.166667);\n    font-size: 4.53333vh; }\n  .tile.tile-2048 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.324074), inset 0 0 0 1px rgba(255, 255, 255, 0.194444);\n    font-size: 4.53333vh; }\n  .tile.tile-4096 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.37037), inset 0 0 0 1px rgba(255, 255, 255, 0.222222);\n    font-size: 4.53333vh; }\n  .tile.tile-8192 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.416667), inset 0 0 0 1px rgba(255, 255, 255, 0.25);\n    font-size: 4.53333vh; }\n  .tile.tile-16384 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.462963), inset 0 0 0 1px rgba(255, 255, 255, 0.277778);\n    font-size: 3.77778vh; }\n  .tile.tile-32768 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.509259), inset 0 0 0 1px rgba(255, 255, 255, 0.305556);\n    font-size: 3.77778vh; }\n  .tile.tile-65536 .tile-inner {\n    color: #f9f6f2;\n    background: #edc22e;\n    box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.555556), inset 0 0 0 1px rgba(255, 255, 255, 0.333333);\n    font-size: 3.77778vh; }\n  .tile.tile-super .tile-inner {\n    color: #f9f6f2;\n    background: #3c3a33;\n    font-size: 30px; }\n\n@-webkit-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n.tile-new .tile-inner {\n  -webkit-animation: appear 200ms ease 100ms;\n  -moz-animation: appear 200ms ease 100ms;\n  animation: appear 200ms ease 100ms;\n  -webkit-animation-fill-mode: backwards;\n  -moz-animation-fill-mode: backwards;\n  animation-fill-mode: backwards; }\n\n@-webkit-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n.tile-merged .tile-inner {\n  z-index: 20;\n  -webkit-animation: pop 200ms ease 100ms;\n  -moz-animation: pop 200ms ease 100ms;\n  animation: pop 200ms ease 100ms;\n  -webkit-animation-fill-mode: backwards;\n  -moz-animation-fill-mode: backwards;\n  animation-fill-mode: backwards; }\n",""])},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),n.push(s))}},n}},function(t,n,e){var r={},o=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),s=null,a=0,l=[],c=e(11);function f(t,n){for(var e=0;e<t.length;e++){var o=t[e],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(p(o.parts[s],n))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(p(o.parts[s],n));r[o.id]={id:o.id,refs:1,parts:a}}}}function h(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],s=n.base?i[0]+n.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):e.push(r[s]={id:s,parts:[a]})}return e}function m(t,n){var e=i(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),l.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,e);e.insertBefore(n,o)}}function u(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=l.indexOf(t);n>=0&&l.splice(n,1)}function v(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return d(n,t.attrs),m(t,n),n}function d(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function p(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var l=a++;e=s||(s=v(n)),r=w.bind(null,e,l,!1),o=w.bind(null,e,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",d(n,t.attrs),m(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,e,n),o=function(){u(e),e.href&&URL.revokeObjectURL(e.href)}):(e=v(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){u(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=h(t,n);return f(e,n),function(t){for(var o=[],i=0;i<e.length;i++){var s=e[i];(a=r[s.id]).refs--,o.push(a)}t&&f(h(t,n),n);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var b=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}();function w(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(n,o);else{var i=document.createTextNode(o),s=t.childNodes;s[n]&&t.removeChild(s[n]),s.length?t.insertBefore(i,s[n]):t.appendChild(i)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,