!function(e){var t={};function i(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(o,r,function(t){return e[t]}.bind(null,r));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Tile=class{constructor(e,t){this.row=e.row,this.col=e.col,this.value=t}savePosition(){this.previousPosition={row:this.row,col:this.col}}updatePosition(e){this.row=e.row,this.col=e.col}toString(){return this.value?Math.log2(this.value).toString(10):"0"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(4),r=i(0),n=i(2);class s{constructor(e,t,i,r){this.nbRows=e,this.nbCols=t,this.board=i||new o.Board(this.nbRows,this.nbCols),this.actuator=r,this.actuate()}static GET_VECTOR(e){switch(e){case n.Direction.Up:return{x:0,y:-1};case n.Direction.Down:return{x:0,y:1};case n.Direction.Left:return{x:-1,y:0};case n.Direction.Right:return{x:1,y:0};default:return{x:0,y:0}}}static positionsEqual(e,t){return e.row===t.row&&e.col===t.col}move(e){const t=s.GET_VECTOR(e),i=this.buildTraversals(t);let o=!1;this.prepareTiles();let n=0,l=0;return i.row.forEach(e=>{i.col.forEach(i=>{const a={row:e,col:i},c=this.board.tileAt(a);if(c&&c.value){const e=this.findFarthestPosition(a,t),i=this.board.tileAt(e.next);if(i&&i.value===c.value&&!i.mergedFrom){const t=new r.Tile(e.next,2*c.value);t.mergedFrom=[c,i],this.board.insertTile(t),this.board.removeTile(c),c.updatePosition(e.next),n++,l+=2*c.value}else this.moveTile(c,e.farthest);s.positionsEqual(a,c)||(o=!0)}})}),o?(this.actuate(),{moved:!0,countMerged:n,scoreObtained:l}):{moved:!1,countMerged:0,scoreObtained:0}}actuate(){this.actuator&&this.actuator.actuate(this.board.tiles)}movesAvailable(){return this.board.getAvailableTiles().length>0||this.tileMatchesAvailable()}toString(){return this.board.toString()}prepareTiles(){this.board.eachTile((e,t,i)=>{i.value&&(i.mergedFrom=void 0,i.savePosition())})}setup(){this.board=new o.Board(this.nbRows,this.nbCols),this.actuate()}buildTraversals(e){const t={row:[],col:[]};for(let e=0;e<this.nbRows;e++)t.row.push(e);for(let e=0;e<this.nbCols;e++)t.col.push(e);return 1===e.x&&(t.col=t.col.reverse()),1===e.y&&(t.row=t.row.reverse()),t}tileMatchesAvailable(){for(let e=0;e<this.nbRows;e++)for(let t=0;t<this.nbCols;t++){const i=this.board.tileAt({row:e,col:t});if(i&&i.value){if(s.directions.some(o=>{const r=s.GET_VECTOR(o),n={row:e+r.y,col:t+r.x},l=this.board.tileAt(n);return!!l&&l.value===i.value}))return!0}}return!1}findFarthestPosition(e,t){let i,o=e;do{o={row:(i=o).row+t.y,col:i.col+t.x}}while(this.board.withinBounds(o)&&this.board.tileAvailable(o));return{farthest:i,next:o}}moveTile(e,t){this.board.removeTile(e),e.updatePosition(t),this.board.insertTile(e)}}s.directions=[n.Direction.Up,n.Direction.Down,n.Direction.Left,n.Direction.Right],t.BoardManager=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Up="UP",e.Down="DOWN",e.Left="LEFT",e.Right="RIGHT"}(t.Direction||(t.Direction={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),r=i(0),n=i(5),s=i(6),l=5,a=5,c=[];let u,d,h=[],f=800;function p(){u&&clearTimeout(u),c.forEach(e=>{e.setup()}),function e(t){if(h.length<=t)return void(u=void 0);d&&(d.innerText=String(Math.floor(t/2+1)));const i=h[t];if(i.aioutput){const e=i.aioutput.split(" ");if(t<2){const[i,o]=e.map(e=>parseInt(e,10)-1);c[(t+1)%2].board.insertTile(new r.Tile({row:i,col:o},2)),c[(t+1)%2].actuate()}else{const[i,...o]=e,r=n.GameManager.DIRECTIONS_MAP.get(i);r&&c[t%2].move(r),c[(t+1)%2].prepareTiles(),n.GameManager.PARSE_ATTACK_COMMAND(o,c[(t+1)%2].board).tiles.forEach(e=>{c[(t+1)%2].board.insertTile(e)}),c[(t+1)%2].actuate()}}u=window.setTimeout(()=>{e(t+1)},f)}(0)}function T(){const e=document.getElementById("file");if(!e||!e.files)return;const t=e.files[0],i=new FileReader;i.onload=(()=>{try{h=JSON.parse(i.result),p()}catch(e){alert("データの準備に失敗しました。"),console.log(e)}}),i.readAsText(t,"utf-8")}function v(e,t){const i=document.createElement(e);return i.setAttribute("class",t),i}window.addEventListener("load",()=>{["#frame1 .game-container","#frame2 .game-container"].forEach(e=>{const t=document.querySelector(e);if(t){const e=v("div","grid-container");for(let t=0;t<l;t++){const t=v("div","grid-row");for(let e=0;e<a;e++)t.appendChild(v("div","grid-cell"));e.appendChild(t)}t.appendChild(e);const i=v("div","tile-container");t.appendChild(i),c.push(new o.BoardManager(l,a,void 0,new s.HTMLActuator(i)))}}),function(){const e=document.getElementById("game-interval-slider");e&&(e.setAttribute("value",f.toString()),e.addEventListener("change",e=>{f=parseInt(e.target.value,10)}));const t=document.getElementById("file");console.log(t),t&&t.addEventListener("change",T);const i=document.getElementById("restart-button");i&&(i.onclick=T),(d=document.getElementById("turn"))&&(d.innerText="0")}()})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0);class r{constructor(e,t){this.nbRows=e,this.nbCols=t,this.tiles=r.createEmptyTileBoard(this.nbRows,this.nbCols)}static FROM_STRINGS(e){const t=e.map(e=>e.trim().split(" ").map(e=>parseInt(e,10))),i=t.length,n=t[0].length,s=new r(i,n);for(let e=0;e<i;e++)for(let i=0;i<n;i++)t[e][i]>0&&s.insertTile(new o.Tile({row:e,col:i},Math.pow(2,t[e][i])));return s}static createEmptyTileBoard(e,t){const i=[];for(let r=0;r<e;r++){i[r]=[];for(let e=0;e<t;e++)i[r][e]=new o.Tile({row:r,col:e},void 0)}return i}withinBounds(e){return e.row>=0&&e.row<this.nbRows&&e.col>=0&&e.col<this.nbCols}insertTile(e){this.tiles[e.row][e.col]=e}removeTile(e){this.tiles[e.row][e.col]=new o.Tile({row:e.row,col:e.col},void 0)}tileAt(e){return this.withinBounds(e)&&this.tiles[e.row][e.col].value?this.tiles[e.row][e.col]:void 0}tileAvailable(e){return!this.tileOccupied(e)}getRandomAvailableTile(){const e=this.getAvailableTiles();if(e.length)return e[Math.floor(Math.random()*e.length)]}getAvailableTiles(){const e=[];return this.eachTile((t,i,r)=>{r.value||e.push(new o.Tile({row:t,col:i},void 0))}),e}eachTile(e){for(let t=0;t<this.nbRows;t++)for(let i=0;i<this.nbCols;i++)e(t,i,this.tiles[t][i])}tileOccupied(e){const t=this.tileAt(e);return t?!!t.value:void 0}toString(){return this.tiles.map(e=>e.map(e=>e.toString()).join(" ")).join("\n")}clone(){const e=new r(this.nbRows,this.nbCols);return this.eachTile((t,i,r)=>{r&&r.value&&r.value>0&&e.insertTile(new o.Tile({row:t,col:i},r.value))}),e}}t.Board=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),r=i(0),n=i(2);class s{constructor(e,t){this.ioLog=[],this.runners=[e,t]}static PARSE_ATTACK_COMMAND(e,t){if(!e.every(s.isPositiveInteger))return{verdict:"NG",reason:"PRESENTATION_ERROR",tiles:[]};const[i,...o]=e.map(e=>parseInt(e,10));if(3*i!==o.length)return{verdict:"NG",reason:"PRESENTATION_ERROR",tiles:[]};const n=[];for(let e=0;e<i;e++){const[i,s,l]=o.slice(3*e,3*e+3),a={row:i-1,col:s-1},c=Math.pow(2,l);if(t.tileOccupied(a))return{verdict:"NG",reason:"INVALID_POSITION",tiles:[]};n.push(new r.Tile(a,c))}return{verdict:"OK",tiles:n}}static isPositiveInteger(e){return s.POSITIVE_REGEXP.test(e)}async gameMain(){const e=[0,0];let t=0;const i=[0,0],n=[new o.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS),new o.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS)],l=(o,r)=>({winner:0===o?"FIRST":"SECOND",reason:r,turn:t,stats:{first:{time:e[0],score:i[0]},second:{time:e[1],score:i[1]}}});for(let t=0;t<2;t++){const i=this.runners[t],o={commands:[t.toString(10)]},a=await i.sendAndReceiveData(o,s.INTIALIZE_TIME_MS);if(console.log(a),this.ioLog.push([o,a]),e[t]+=a.runtimeNs,"OK"!==a.verdict)return"TLE"===a.verdict?l((t+1)%2,"TIME_LIMIT_EXCEEDED"):l((t+1)%2,"RUNTIME_ERROR");const c=(()=>{if(!a.output)return"PRESENTATION_ERROR";const e=a.output.split(" ");if(!e.every(s.isPositiveInteger))return"PRESENTATION_ERROR";const[i,o]=e.map(e=>parseInt(e,10)-1);return n[t].board.withinBounds({row:i,col:o})?(n[(t+1)%2].board.insertTile(new r.Tile({row:i,col:o},2)),null):"INVALID_POSITION"})();if(c)return l((t+1)%2,c)}for(t=1;t<=s.MAX_TURN;t++)for(let t=0;t<2;t++){const o=this.runners[t],r=n[t],a=n[(t+1)%2];if(!r.movesAvailable())return l((t+1)%2,"BOARD_FILLED");const c={commands:[r.toString(),a.toString()]},u=await o.sendAndReceiveData(c,s.MAIN_TURN_TIME_MS);if(console.log(u),this.ioLog.push([c,u]),e[t]+=u.runtimeNs,"OK"!==u.verdict)return"TLE"===u.verdict?l((t+1)%2,"TIME_LIMIT_EXCEEDED"):l((t+1)%2,"RUNTIME_ERROR");const d=(()=>{if(!u.output)return"PRESENTATION_ERROR";const[e,...o]=u.output.split(" ");if(!e)return"PRESENTATION_ERROR";const n=s.DIRECTIONS_MAP.get(e);if(!n)return"INVALID_DIRECTION";const l=r.move(n);if(!l.moved)return"INVALID_DIRECTION";const c=s.PARSE_ATTACK_COMMAND(o,a.board);if("OK"!==c.verdict)return!1;let d=0;return c.tiles.forEach(e=>{a.board.insertTile(e),d+=e.value||0}),d!==Math.pow(2,l.countMerged+1)?"INVALID_VALUE_TO_PUT":(i[t]+=l.scoreObtained,null)})();if(d)return l((t+1)%2,d)}return i[0]>i[1]?l(0,"SCORE"):i[1]>i[0]?l(1,"SCORE"):l(1,"EVEN_SCORE")}writeLogsToFile(e){0}}s.DIRECTIONS_MAP=new Map([["U",n.Direction.Up],["D",n.Direction.Down],["R",n.Direction.Right],["L",n.Direction.Left]]),s.BOARD_NUM_ROWS=5,s.BOARD_NUM_COLS=5,s.INTIALIZE_TIME_MS=500,s.MAIN_TURN_TIME_MS=100,s.MAX_TURN=1e3,s.POSITIVE_REGEXP=/^\+0|[1-9]\d*$/,t.GameManager=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HTMLActuator=class{constructor(e){this.tileContainer=e}actuate(e){window.requestAnimationFrame(()=>{this.clearContainer(this.tileContainer),e.forEach(e=>{e.forEach(e=>{e&&this.addTile(e)})})})}clearContainer(e){for(;e.firstChild;)e.removeChild(e.firstChild)}addTile(e){if(!e.value)return;const t=document.createElement("div"),i=document.createElement("div"),o=e.previousPosition||{row:e.row,col:e.col},r=this.positionClass(o),n=["tile",`tile-${e.value}`,r];e.value>2048&&n.push("tile-super"),this.applyClasses(t,n),i.classList.add("tile-inner"),i.textContent=e.value.toString(10),e.previousPosition?window.requestAnimationFrame(()=>{n[2]=this.positionClass({row:e.row,col:e.col}),this.applyClasses(t,n)}):e.mergedFrom?(n.push("tile-merged"),this.applyClasses(t,n),e.mergedFrom.forEach(e=>{this.addTile(e)})):(n.push("tile-new"),this.applyClasses(t,n)),t.appendChild(i),this.tileContainer.appendChild(t)}positionClass(e){return`tile-position-${e.col+1}-${e.row+1}`}applyClasses(e,t){e.setAttribute("class",t.join(" "))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,