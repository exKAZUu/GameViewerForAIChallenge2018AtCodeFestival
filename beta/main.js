!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Tile=class{constructor(t,e){this.row=t.row,this.col=t.col,this.value=e}savePosition(){this.previousPosition={row:this.row,col:this.col}}updatePosition(t){this.row=t.row,this.col=t.col}toString(){return this.value?Math.log2(this.value).toString(10):"0"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0);class o{constructor(t,e){this.nbRows=t,this.nbCols=e,this.tiles=o.createEmptyTileBoard(this.nbRows,this.nbCols)}static FROM_STRINGS(t){const e=t.map(t=>t.trim().split(" ").map(t=>parseInt(t,10))),n=e.length,i=e[0].length,s=new o(n,i);for(let t=0;t<n;t++)for(let n=0;n<i;n++)e[t][n]>0&&s.insertTile(new r.Tile({row:t,col:n},Math.pow(2,e[t][n])));return s}static createEmptyTileBoard(t,e){const n=[];for(let o=0;o<t;o++){n[o]=[];for(let t=0;t<e;t++)n[o][t]=new r.Tile({row:o,col:t},void 0)}return n}withinBounds(t){return t.row>=0&&t.row<this.nbRows&&t.col>=0&&t.col<this.nbCols}insertTile(t){this.tiles[t.row][t.col]=t}removeTile(t){this.tiles[t.row][t.col]=new r.Tile({row:t.row,col:t.col},void 0)}tileAt(t){return this.withinBounds(t)&&this.tiles[t.row][t.col].value?this.tiles[t.row][t.col]:void 0}tileAvailable(t){return!this.tileOccupied(t)}getRandomAvailableTile(){const t=this.getAvailableTiles();if(t.length)return t[Math.floor(Math.random()*t.length)]}getAvailableTiles(){const t=[];return this.eachTile((e,n,o)=>{o.value||t.push(new r.Tile({row:e,col:n},void 0))}),t}eachTile(t){for(let e=0;e<this.nbRows;e++)for(let n=0;n<this.nbCols;n++)t(e,n,this.tiles[e][n])}tileOccupied(t){const e=this.tileAt(t);return e?!!e.value:void 0}toString(){return this.tiles.map(t=>t.map(t=>t.toString()).join(" ")).join("\n")}clone(){const t=new o(this.nbRows,this.nbCols);return this.eachTile((e,n,o)=>{o&&o.value&&o.value>0&&t.insertTile(new r.Tile({row:e,col:n},o.value))}),t}}e.Board=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(0),i=n(3);class s{constructor(t,e,n,o){this.nbRows=t,this.nbCols=e,this.board=n||new r.Board(this.nbRows,this.nbCols),this.actuator=o,this.actuate()}static GET_VECTOR(t){switch(t){case i.Direction.Up:return{x:0,y:-1};case i.Direction.Down:return{x:0,y:1};case i.Direction.Left:return{x:-1,y:0};case i.Direction.Right:return{x:1,y:0};default:return{x:0,y:0}}}static positionsEqual(t,e){return t.row===e.row&&t.col===e.col}move(t){const e=s.GET_VECTOR(t),n=this.buildTraversals(e);let r=!1;this.prepareTiles();let i=0,a=0;return n.row.forEach(t=>{n.col.forEach(n=>{const l={row:t,col:n},c=this.board.tileAt(l);if(c&&c.value){const t=this.findFarthestPosition(l,e),n=this.board.tileAt(t.next);if(n&&n.value===c.value&&!n.mergedFrom){const e=new o.Tile(t.next,2*c.value);e.mergedFrom=[c,n],this.board.insertTile(e),this.board.removeTile(c),c.updatePosition(t.next),i++,a+=2*c.value}else this.moveTile(c,t.farthest);s.positionsEqual(l,c)||(r=!0)}})}),r?(this.actuate(),{moved:!0,countMerged:i,scoreObtained:a}):{moved:!1,countMerged:0,scoreObtained:0}}actuate(){this.actuator&&this.actuator.actuate(this.board.tiles)}movesAvailable(){return this.board.getAvailableTiles().length>0||this.tileMatchesAvailable()}toString(){return this.board.toString()}prepareTiles(){this.board.eachTile((t,e,n)=>{n.value&&(n.mergedFrom=void 0,n.savePosition())})}setup(){this.board=new r.Board(this.nbRows,this.nbCols),this.actuate()}buildTraversals(t){const e={row:[],col:[]};for(let t=0;t<this.nbRows;t++)e.row.push(t);for(let t=0;t<this.nbCols;t++)e.col.push(t);return 1===t.x&&(e.col=e.col.reverse()),1===t.y&&(e.row=e.row.reverse()),e}tileMatchesAvailable(){for(let t=0;t<this.nbRows;t++)for(let e=0;e<this.nbCols;e++){const n=this.board.tileAt({row:t,col:e});if(n&&n.value){if(s.directions.some(r=>{const o=s.GET_VECTOR(r),i={row:t+o.y,col:e+o.x},a=this.board.tileAt(i);return!!a&&a.value===n.value}))return!0}}return!1}findFarthestPosition(t,e){let n,r=t;do{r={row:(n=r).row+e.y,col:n.col+e.x}}while(this.board.withinBounds(r)&&this.board.tileAvailable(r));return{farthest:n,next:r}}moveTile(t,e){this.board.removeTile(t),t.updatePosition(e),this.board.insertTile(t)}}s.directions=[i.Direction.Up,i.Direction.Down,i.Direction.Left,i.Direction.Right],e.BoardManager=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.Up="UP",t.Down="DOWN",t.Left="LEFT",t.Right="RIGHT"}(e.Direction||(e.Direction={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(2),i=n(0),s=n(5),a=n(6);n(7);const l=".buttle-2048-viewer",c=5,p=5,u=100,f=1e3,m=1e5,d=[];let b,x,w,h,v,g,y,T=[],E=!1,R=0,k=[0,0],S=[m,m],O=500,A=[],I=[],_=[];function M(){x&&(x.innerText=String(Math.floor((R+1)/2)));const t=R%2;_.forEach((e,n)=>{e&&(e.className=n===t?"player turn-player":"player")}),A.forEach((t,e)=>{t&&(t.textContent=String(k[e]))}),I.forEach((t,e)=>{t&&(t.textContent=String(Math.round(S[e])))}),w&&(R>=T.length-1&&E?w.className="results results-show":w.className="results results-hide"),y&&(y.value=R.toString(10))}function z(){if(T.length<=R)return void L();const t=T[R];if(console.log(t,t.aiinput,t.aioutput),t.aioutput){const e=t.aioutput.split(" ");if(R<2){const[t,n]=e.map(t=>parseInt(t,10)-1);d[(R+1)%2].board.insertTile(new i.Tile({row:t,col:n},2)),d[(R+1)%2].actuate()}else{const[n,...r]=e,o=s.GameManager.DIRECTIONS_MAP.get(n);if(o){const t=d[R%2].move(o);k[R%2]+=t.scoreObtained}d[(R+1)%2].prepareTiles();const i=s.GameManager.PARSE_ATTACK_COMMAND(r,d[(R+1)%2].board);i.tiles&&(i.tiles.forEach(t=>{d[(R+1)%2].board.insertTile(t)}),d[(R+1)%2].actuate()),t.runtime&&(S[R%2]-=t.runtime)}}M(),R++}function N(){z(),b=window.setTimeout(N,O)}function C(t){if(t>=0&&t<T.length){const e=!!b;if(L(),t<2)d.forEach(t=>{t.setup()}),R=0,k=[0,0],S=[m,m];else{const e=T[t].aiinput;if(e){const n=e.split("\n");d[t%2].board=r.Board.FROM_STRINGS(n.slice(1,c+1)),d[(t+1)%2].board=r.Board.FROM_STRINGS(n.slice(c+1,2*c+1));const[o,i,s,a]=n[0].split(" ").map(t=>parseInt(t,10));if(k=t%2==0?[s,a]:[a,s],S[t%2]=i,2===t)S[1]=m;else{const{aiinput:e,runtime:n}=T[t-1];if(e&&n){const r=parseInt(e.split("\n")[0].split(" ")[1],10);S[(t+1)%2]=r-n}}}d.forEach(t=>{t.prepareTiles(),t.actuate()}),R=t-1}M(),R=t<2?0:t,e&&D()}}function L(){b&&clearTimeout(b),b=void 0,g&&(g.textContent="再生")}function D(){L();let t=0;y&&(y.setAttribute("max",(T.length-1).toString(10)),t=parseInt(y.value,10)+1),C(t),g&&(g.textContent="停止"),b=window.setTimeout(N,O,t)}function P(t,e){const n=document.createElement(t);return n.setAttribute("class",e),n}function U(){L();const t=document.querySelector(`${l} #file-input`);if(!t||!t.files)return;const e=t.files[0],n=new FileReader;n.onload=(()=>{try{T=j(JSON.parse(n.result)),C(0),D()}catch(t){alert("データの準備に失敗しました。\n標準では game.log が該当の出力ファイルです。"),console.log(t)}}),n.readAsText(e,"utf-8")}function j(t){if(Array.isArray(t))return E=!1,t;{const e=t.gameResult;return h&&(h.innerText=`PLAYER ${e.winner} WINS!`),v&&(v.innerText=e.defeatReason),E=!0,t.commands}}window.addEventListener("load",()=>{["#player-1 .board-container","#player-2 .board-container"].forEach(t=>{const e=document.querySelector(`${l} ${t}`);if(e){const t=P("div","grid-container");for(let e=0;e<c;e++){const e=P("div","grid-row");for(let t=0;t<p;t++)e.appendChild(P("div","grid-cell"));t.appendChild(e)}e.appendChild(t);const n=P("div","tile-container");e.appendChild(n),d.push(new o.BoardManager(c,p,void 0,new a.HTMLActuator(n)))}}),function(){(x=document.querySelector(`${l} #turn`))&&(x.innerText="0"),(A=[document.querySelector(`${l} #score-1`),document.querySelector(`${l} #score-2`)]).forEach(t=>{t&&(t.innerText="0")}),(I=[document.querySelector(`${l} #time-left-1`),document.querySelector(`${l} #time-left-2`)]).forEach(t=>{t&&(t.innerText="0")}),_=[document.querySelector(`${l} #player-1`),document.querySelector(`${l} #player-2`)],(w=document.querySelector(`${l} #results`))&&(w.className="results results-hide"),(h=document.querySelector(`${l} #winner`))&&(h.innerText="PLAYER X WINS!"),(v=document.querySelector(`${l} #reason`))&&(v.innerText="UNDEFINED REASON");const t=document.querySelector(`${l} #game-interval-slider`);if(t){const e=t=>f-t*(f-u);t.setAttribute("value",((f-O)/(f-u)).toString()),t.addEventListener("change",t=>{O=e(parseInt(t.target.value,10))})}const e=document.querySelector(`${l} #file-input`);e&&e.addEventListener("change",U);const n=document.querySelector(`${l} #reload-button`);n&&(n.onclick=U),(y=document.querySelector(`${l} #turn-slider`))&&y.addEventListener("change",t=>{C(parseInt(t.target.value,10))}),(g=document.querySelector(`${l} #play-toggle`))&&(g.onclick=(()=>{b?L():D()}));const r=document.querySelector(`${l} #turn-prev`);r&&(r.onclick=(()=>{C(Math.max(R-1,0))}));const o=document.querySelector(`${l} #turn-next`);o&&(o.onclick=z)}(),function(){const t=window.replay;if(!t)return;const e=document.querySelector(`${l} #file-input`);e&&e.remove(),T=j(t),C(0),D()}()})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(2),o=n(0),i=n(3);class s{constructor(t,e){this.ioLog=[],this.runners=[t,e]}static PARSE_ATTACK_COMMAND(t,e){if(!t.every(s.isPositiveInteger))return{verdict:"NG",reason:"PRESENTATION_ERROR"};const[n,r,...i]=t.map(t=>parseInt(t,10));if(2*n!==i.length||!r)return{verdict:"NG",reason:"PRESENTATION_ERROR"};const a=Math.pow(2,r),l=[];for(let t=0;t<n;t++){const[n,r]=i.slice(2*t,2*t+2),s={row:n-1,col:r-1};if(e.tileOccupied(s))return{verdict:"NG",reason:"INVALID_POSITION"};l.push(new o.Tile(s,a))}return{verdict:"OK",tiles:l}}static isPositiveInteger(t){return s.POSITIVE_REGEXP.test(t)}async gameMain(){const t=[0,0];let e=0;const n=[0,0],i=[s.TOTAL_MAIN_TIME_MS,s.TOTAL_MAIN_TIME_MS],a=[new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS),new r.BoardManager(s.BOARD_NUM_ROWS,s.BOARD_NUM_COLS)],l=(r,o)=>({winner:0===r?"FIRST":"SECOND",defeatReason:o,turn:e,stats:{first:{time:t[0],score:n[0]},second:{time:t[1],score:n[1]}}});for(let e=0;e<2;e++){const n=this.runners[e],r={commands:[e.toString(10)]},i=await n.sendAndReceiveData(r,s.INTIALIZE_TIME_MS);if(console.log(i),this.ioLog.push([r,i]),t[e]+=i.runtimeNs,"OK"!==i.verdict)return"TLE"===i.verdict?l((e+1)%2,"TIME_LIMIT_EXCEEDED"):l((e+1)%2,"RUNTIME_ERROR");const c=(()=>{if(!i.output)return"PRESENTATION_ERROR";const t=i.output.split(" ");if(!t.every(s.isPositiveInteger))return"PRESENTATION_ERROR";const[n,r]=t.map(t=>parseInt(t,10)-1);return a[e].board.withinBounds({row:n,col:r})?(a[(e+1)%2].board.insertTile(new o.Tile({row:n,col:r},2)),null):"INVALID_POSITION"})();if(c)return l((e+1)%2,c)}for(e=1;e<=s.MAX_TURN;e++)for(let r=0;r<2;r++){const o=this.runners[r],c=a[r],p=a[(r+1)%2],u={commands:[`${e} ${Math.round(i[r])} ${n[r]} ${n[(r+1)%2]}`,c.toString(),p.toString()]},f=await o.sendAndReceiveData(u,s.MAIN_TURN_TIME_MS);if(console.log(f),this.ioLog.push([u,f]),t[r]+=f.runtimeNs,"OK"!==f.verdict)return"TLE"===f.verdict?l((r+1)%2,"TIME_LIMIT_EXCEEDED"):l((r+1)%2,"RUNTIME_ERROR");const m=(()=>{if(!f.output)return"PRESENTATION_ERROR";const[t,...e]=f.output.split(" ");if(!t)return"PRESENTATION_ERROR";const o=s.DIRECTIONS_MAP.get(t);if(!o)return"INVALID_DIRECTION";const a=c.move(o);if(!a.moved)return"INVALID_DIRECTION";const l=s.PARSE_ATTACK_COMMAND(e,p.board);if("OK"!==l.verdict||!l.tiles)return l.reason||"PRESENTATION_ERROR";let u=0;for(const t of l.tiles){if(p.board.tileAt({row:t.row,col:t.col}))return"INVALID_PLACE_TO_PUT";p.board.insertTile(t),u+=t.value||0}return u!==Math.pow(2,a.countMerged+1)?"INVALID_VALUE_TO_PUT":(n[r]+=a.scoreObtained,i[r]-=f.runtimeNs/1e3/1e3,null)})();if(m)return l((r+1)%2,m)}return n[0]>n[1]?l(0,"SCORE"):n[1]>n[0]?l(1,"SCORE"):l(1,"EVEN_SCORE")}writeLogsToFile(t){0}}s.DIRECTIONS_MAP=new Map([["U",i.Direction.Up],["D",i.Direction.Down],["R",i.Direction.Right],["L",i.Direction.Left]]),s.BOARD_NUM_ROWS=5,s.BOARD_NUM_COLS=5,s.INTIALIZE_TIME_MS=1e3,s.MAIN_TURN_TIME_MS=1e3,s.TOTAL_MAIN_TIME_MS=1e5,s.MAX_TURN=1e3,s.POSITIVE_REGEXP=/^\+0|[1-9]\d*$/,e.GameManager=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.HTMLActuator=class{constructor(t){this.tileContainer=t}actuate(t){window.requestAnimationFrame(()=>{this.clearContainer(this.tileContainer),t.forEach(t=>{t.forEach(t=>{t&&this.addTile(t)})})})}clearContainer(t){for(;t.firstChild;)t.removeChild(t.firstChild)}addTile(t){if(!t.value)return;const e=document.createElement("div"),n=document.createElement("div"),r=t.previousPosition||{row:t.row,col:t.col},o=this.positionClass(r),i=["tile",`tile-${t.value}`,o];t.value>2048&&i.push("tile-super"),this.applyClasses(e,i),n.classList.add("tile-inner"),n.textContent=t.value.toString(10),t.previousPosition?window.requestAnimationFrame(()=>{i[2]=this.positionClass({row:t.row,col:t.col}),this.applyClasses(e,i)}):t.mergedFrom?(i.push("tile-merged"),this.applyClasses(e,i),t.mergedFrom.forEach(t=>{this.addTile(t)})):(i.push("tile-new"),this.applyClasses(e,i)),e.appendChild(n),this.tileContainer.appendChild(e)}positionClass(t){return`tile-position-${t.col+1}-${t.row+1}`}applyClasses(t,e){t.setAttribute("class",e.join(" "))}}},function(t,e,n){var r=n(8);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(10)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(9)(!1)).push([t.i,".buttle-2048-viewer {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  background: #faf8ef;\n  color: #776e65;\n  line-height: 1;\n  font-size: 10px; }\n  .buttle-2048-viewer * {\n    box-sizing: border-box; }\n  .buttle-2048-viewer div {\n    display: block;\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    background: transparent;\n    color: inherit;\n    font-size: inherit;\n    font-weight: inherit;\n    text-shadow: none; }\n  .buttle-2048-viewer .game {\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-grow: 1;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\n    font-weight: bold; }\n  .buttle-2048-viewer .player {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 10px; }\n    .buttle-2048-viewer .player .header {\n      font-size: 15px;\n      margin-bottom: 10px;\n      color: #bbada0; }\n  .buttle-2048-viewer .turn-player .header {\n    color: #776e65; }\n  .buttle-2048-viewer .stats {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 300px;\n    margin-bottom: 50px;\n    font-size: 15px;\n    font-weight: bold; }\n    .buttle-2048-viewer .stats .label {\n      margin-top: 50px;\n      margin-bottom: 10px;\n      color: #bbada0; }\n    .buttle-2048-viewer .stats #turn {\n      font-size: 30px; }\n    .buttle-2048-viewer .stats .score,\n    .buttle-2048-viewer .stats .time-left {\n      display: flex;\n      flex-direction: row;\n      width: 100%;\n      font-size: 30px; }\n      .buttle-2048-viewer .stats .score div,\n      .buttle-2048-viewer .stats .time-left div {\n        flex-basis: 50%;\n        text-align: center; }\n  .buttle-2048-viewer .results {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: absolute;\n    bottom: 20px;\n    z-index: 100;\n    padding: 15px 20px;\n    border-radius: 2.5px;\n    background-color: rgba(119, 110, 101, 0.95);\n    color: #faf8ef; }\n    .buttle-2048-viewer .results #winner {\n      font-size: 30px; }\n    .buttle-2048-viewer .results #reason {\n      margin-top: 5px;\n      font-size: 15px; }\n  .buttle-2048-viewer .results-show {\n    -webkit-animation: pop 200ms ease 100ms;\n    -moz-animation: pop 200ms ease 100ms;\n    animation: pop 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n  .buttle-2048-viewer .results-hide {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  .buttle-2048-viewer .inputs {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 5px;\n    color: #000; }\n    .buttle-2048-viewer .inputs button,\n    .buttle-2048-viewer .inputs input {\n      margin: 2.5px;\n      font-size: 10px; }\n    .buttle-2048-viewer .inputs #turn-slider {\n      flex-grow: 1; }\n  .buttle-2048-viewer .board-container {\n    position: relative;\n    padding: 10px;\n    cursor: default;\n    -webkit-touch-callout: none;\n    -ms-touch-callout: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -ms-touch-action: none;\n    touch-action: none;\n    background: #bbada0;\n    border-radius: 5px;\n    width: 400px;\n    height: 400px;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box; }\n  .buttle-2048-viewer .grid-container {\n    position: absolute;\n    z-index: 1; }\n  .buttle-2048-viewer .grid-row {\n    margin-bottom: 10px; }\n    .buttle-2048-viewer .grid-row:last-child {\n      margin-bottom: 0; }\n    .buttle-2048-viewer .grid-row:after {\n      content: '';\n      display: block;\n      clear: both; }\n  .buttle-2048-viewer .grid-cell {\n    width: 68px;\n    height: 68px;\n    margin-right: 10px;\n    float: left;\n    border-radius: 2.5px;\n    background: rgba(238, 228, 218, 0.35); }\n    .buttle-2048-viewer .grid-cell:last-child {\n      margin-right: 0; }\n  .buttle-2048-viewer .tile-container {\n    position: absolute;\n    z-index: 2; }\n  .buttle-2048-viewer .tile,\n  .buttle-2048-viewer .tile .tile-inner {\n    width: 68px;\n    height: 68px;\n    line-height: 68px; }\n  .buttle-2048-viewer .tile.tile-position-1-1 {\n    -webkit-transform: translate(0px, 0px);\n    -moz-transform: translate(0px, 0px);\n    -ms-transform: translate(0px, 0px);\n    transform: translate(0px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-1-2 {\n    -webkit-transform: translate(0px, 78px);\n    -moz-transform: translate(0px, 78px);\n    -ms-transform: translate(0px, 78px);\n    transform: translate(0px, 78px); }\n  .buttle-2048-viewer .tile.tile-position-1-3 {\n    -webkit-transform: translate(0px, 156px);\n    -moz-transform: translate(0px, 156px);\n    -ms-transform: translate(0px, 156px);\n    transform: translate(0px, 156px); }\n  .buttle-2048-viewer .tile.tile-position-1-4 {\n    -webkit-transform: translate(0px, 234px);\n    -moz-transform: translate(0px, 234px);\n    -ms-transform: translate(0px, 234px);\n    transform: translate(0px, 234px); }\n  .buttle-2048-viewer .tile.tile-position-1-5 {\n    -webkit-transform: translate(0px, 312px);\n    -moz-transform: translate(0px, 312px);\n    -ms-transform: translate(0px, 312px);\n    transform: translate(0px, 312px); }\n  .buttle-2048-viewer .tile.tile-position-2-1 {\n    -webkit-transform: translate(78px, 0px);\n    -moz-transform: translate(78px, 0px);\n    -ms-transform: translate(78px, 0px);\n    transform: translate(78px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-2-2 {\n    -webkit-transform: translate(78px, 78px);\n    -moz-transform: translate(78px, 78px);\n    -ms-transform: translate(78px, 78px);\n    transform: translate(78px, 78px); }\n  .buttle-2048-viewer .tile.tile-position-2-3 {\n    -webkit-transform: translate(78px, 156px);\n    -moz-transform: translate(78px, 156px);\n    -ms-transform: translate(78px, 156px);\n    transform: translate(78px, 156px); }\n  .buttle-2048-viewer .tile.tile-position-2-4 {\n    -webkit-transform: translate(78px, 234px);\n    -moz-transform: translate(78px, 234px);\n    -ms-transform: translate(78px, 234px);\n    transform: translate(78px, 234px); }\n  .buttle-2048-viewer .tile.tile-position-2-5 {\n    -webkit-transform: translate(78px, 312px);\n    -moz-transform: translate(78px, 312px);\n    -ms-transform: translate(78px, 312px);\n    transform: translate(78px, 312px); }\n  .buttle-2048-viewer .tile.tile-position-3-1 {\n    -webkit-transform: translate(156px, 0px);\n    -moz-transform: translate(156px, 0px);\n    -ms-transform: translate(156px, 0px);\n    transform: translate(156px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-3-2 {\n    -webkit-transform: translate(156px, 78px);\n    -moz-transform: translate(156px, 78px);\n    -ms-transform: translate(156px, 78px);\n    transform: translate(156px, 78px); }\n  .buttle-2048-viewer .tile.tile-position-3-3 {\n    -webkit-transform: translate(156px, 156px);\n    -moz-transform: translate(156px, 156px);\n    -ms-transform: translate(156px, 156px);\n    transform: translate(156px, 156px); }\n  .buttle-2048-viewer .tile.tile-position-3-4 {\n    -webkit-transform: translate(156px, 234px);\n    -moz-transform: translate(156px, 234px);\n    -ms-transform: translate(156px, 234px);\n    transform: translate(156px, 234px); }\n  .buttle-2048-viewer .tile.tile-position-3-5 {\n    -webkit-transform: translate(156px, 312px);\n    -moz-transform: translate(156px, 312px);\n    -ms-transform: translate(156px, 312px);\n    transform: translate(156px, 312px); }\n  .buttle-2048-viewer .tile.tile-position-4-1 {\n    -webkit-transform: translate(234px, 0px);\n    -moz-transform: translate(234px, 0px);\n    -ms-transform: translate(234px, 0px);\n    transform: translate(234px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-4-2 {\n    -webkit-transform: translate(234px, 78px);\n    -moz-transform: translate(234px, 78px);\n    -ms-transform: translate(234px, 78px);\n    transform: translate(234px, 78px); }\n  .buttle-2048-viewer .tile.tile-position-4-3 {\n    -webkit-transform: translate(234px, 156px);\n    -moz-transform: translate(234px, 156px);\n    -ms-transform: translate(234px, 156px);\n    transform: translate(234px, 156px); }\n  .buttle-2048-viewer .tile.tile-position-4-4 {\n    -webkit-transform: translate(234px, 234px);\n    -moz-transform: translate(234px, 234px);\n    -ms-transform: translate(234px, 234px);\n    transform: translate(234px, 234px); }\n  .buttle-2048-viewer .tile.tile-position-4-5 {\n    -webkit-transform: translate(234px, 312px);\n    -moz-transform: translate(234px, 312px);\n    -ms-transform: translate(234px, 312px);\n    transform: translate(234px, 312px); }\n  .buttle-2048-viewer .tile.tile-position-5-1 {\n    -webkit-transform: translate(312px, 0px);\n    -moz-transform: translate(312px, 0px);\n    -ms-transform: translate(312px, 0px);\n    transform: translate(312px, 0px); }\n  .buttle-2048-viewer .tile.tile-position-5-2 {\n    -webkit-transform: translate(312px, 78px);\n    -moz-transform: translate(312px, 78px);\n    -ms-transform: translate(312px, 78px);\n    transform: translate(312px, 78px); }\n  .buttle-2048-viewer .tile.tile-position-5-3 {\n    -webkit-transform: translate(312px, 156px);\n    -moz-transform: translate(312px, 156px);\n    -ms-transform: translate(312px, 156px);\n    transform: translate(312px, 156px); }\n  .buttle-2048-viewer .tile.tile-position-5-4 {\n    -webkit-transform: translate(312px, 234px);\n    -moz-transform: translate(312px, 234px);\n    -ms-transform: translate(312px, 234px);\n    transform: translate(312px, 234px); }\n  .buttle-2048-viewer .tile.tile-position-5-5 {\n    -webkit-transform: translate(312px, 312px);\n    -moz-transform: translate(312px, 312px);\n    -ms-transform: translate(312px, 312px);\n    transform: translate(312px, 312px); }\n  .buttle-2048-viewer .tile {\n    position: absolute;\n    -webkit-transition: 100ms ease-in-out;\n    -moz-transition: 100ms ease-in-out;\n    transition: 100ms ease-in-out;\n    -webkit-transition-property: -webkit-transform;\n    -moz-transition-property: -moz-transform;\n    transition-property: transform; }\n    .buttle-2048-viewer .tile .tile-inner {\n      border-radius: 2.5px;\n      background: #eee4da;\n      text-align: center;\n      font-weight: bold;\n      z-index: 10; }\n    .buttle-2048-viewer .tile.tile-2 .tile-inner {\n      background: #eee4da;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-4 .tile-inner {\n      background: #eee1c9;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0), inset 0 0 0 1px rgba(255, 255, 255, 0);\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-8 .tile-inner {\n      color: #f9f6f2;\n      background: #f3b27a;\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-16 .tile-inner {\n      color: #f9f6f2;\n      background: #f69664;\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-32 .tile-inner {\n      color: #f9f6f2;\n      background: #f77c5f;\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-64 .tile-inner {\n      color: #f9f6f2;\n      background: #f75f3b;\n      font-size: 45.33333px; }\n    .buttle-2048-viewer .tile.tile-128 .tile-inner {\n      color: #f9f6f2;\n      background: #edd073;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.138889), inset 0 0 0 1px rgba(255, 255, 255, 0.0833333);\n      font-size: 34px; }\n    .buttle-2048-viewer .tile.tile-256 .tile-inner {\n      color: #f9f6f2;\n      background: #edcc62;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.185185), inset 0 0 0 1px rgba(255, 255, 255, 0.111111);\n      font-size: 34px; }\n    .buttle-2048-viewer .tile.tile-512 .tile-inner {\n      color: #f9f6f2;\n      background: #edc950;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.231481), inset 0 0 0 1px rgba(255, 255, 255, 0.138889);\n      font-size: 34px; }\n    .buttle-2048-viewer .tile.tile-1024 .tile-inner {\n      color: #f9f6f2;\n      background: #edc53f;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.277778), inset 0 0 0 1px rgba(255, 255, 255, 0.166667);\n      font-size: 27.2px; }\n    .buttle-2048-viewer .tile.tile-2048 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.324074), inset 0 0 0 1px rgba(255, 255, 255, 0.194444);\n      font-size: 27.2px; }\n    .buttle-2048-viewer .tile.tile-4096 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.37037), inset 0 0 0 1px rgba(255, 255, 255, 0.222222);\n      font-size: 27.2px; }\n    .buttle-2048-viewer .tile.tile-8192 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.416667), inset 0 0 0 1px rgba(255, 255, 255, 0.25);\n      font-size: 27.2px; }\n    .buttle-2048-viewer .tile.tile-16384 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.462963), inset 0 0 0 1px rgba(255, 255, 255, 0.277778);\n      font-size: 22.66667px; }\n    .buttle-2048-viewer .tile.tile-32768 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.509259), inset 0 0 0 1px rgba(255, 255, 255, 0.305556);\n      font-size: 22.66667px; }\n    .buttle-2048-viewer .tile.tile-65536 .tile-inner {\n      color: #f9f6f2;\n      background: #edc22e;\n      box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.555556), inset 0 0 0 1px rgba(255, 255, 255, 0.333333);\n      font-size: 22.66667px; }\n    .buttle-2048-viewer .tile.tile-super .tile-inner {\n      color: #f9f6f2;\n      background: #3c3a33;\n      font-size: 30px; }\n\n@-webkit-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes appear {\n  0% {\n    opacity: 0;\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  100% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n  .buttle-2048-viewer .tile-new .tile-inner {\n    -webkit-animation: appear 200ms ease 100ms;\n    -moz-animation: appear 200ms ease 100ms;\n    animation: appear 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n\n@-webkit-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@-moz-keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n\n@keyframes pop {\n  0% {\n    -webkit-transform: scale(0);\n    -moz-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0); }\n  50% {\n    -webkit-transform: scale(1.2);\n    -moz-transform: scale(1.2);\n    -ms-transform: scale(1.2);\n    transform: scale(1.2); }\n  100% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    transform: scale(1); } }\n  .buttle-2048-viewer .tile-merged .tile-inner {\n    z-index: 20;\n    -webkit-animation: pop 200ms ease 100ms;\n    -moz-animation: pop 200ms ease 100ms;\n    animation: pop 200ms ease 100ms;\n    -webkit-animation-fill-mode: backwards;\n    -moz-animation-fill-mode: backwards;\n    animation-fill-mode: backwards; }\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),s=null,a=0,l=[],c=n(11);function p(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(x(o.parts[s],e))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(x(o.parts[s],e));r[o.id]={id:o.id,refs:1,parts:a}}}}function u(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function f(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,n);n.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return b(e,t.attrs),f(t,e),e}function b(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function x(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var l=a++;n=s||(s=d(e)),r=h.bind(null,n,l,!1),o=h.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),f(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=d(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=u(t,e);return p(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var s=n[i];(a=r[s.id]).refs--,o.push(a)}t&&p(u(t,e),e);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var w=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function h(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2dhbWUvc3JjL0NvcmUvVGlsZS50cyIsIndlYnBhY2s6Ly8vLi4vZ2FtZS9zcmMvQ29yZS9Cb2FyZC50cyIsIndlYnBhY2s6Ly8vLi4vZ2FtZS9zcmMvQ29yZS9Cb2FyZE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4uL2dhbWUvc3JjL0NvcmUvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4uL2dhbWUvc3JjL0dhbWVNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9IVE1MQWN0dWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uc2Nzcz84MDljIiwid2VicGFjazovLy8uL3NyYy9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9oc2F0by9wcm9qZWN0L0NvZGVGZXN0aXZhbDIwMTgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvaHNhdG8vcHJvamVjdC9Db2RlRmVzdGl2YWwyMDE4L25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2hzYXRvL3Byb2plY3QvQ29kZUZlc3RpdmFsMjAxOC9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVGlsZSIsIltvYmplY3QgT2JqZWN0XSIsInBvc2l0aW9uIiwiaW5pdGlhbFZhbHVlIiwidGhpcyIsInJvdyIsImNvbCIsInByZXZpb3VzUG9zaXRpb24iLCJNYXRoIiwibG9nMiIsInRvU3RyaW5nIiwiVGlsZV8xIiwiQm9hcmQiLCJyb3dzIiwiY29scyIsIm5iUm93cyIsIm5iQ29scyIsInRpbGVzIiwiY3JlYXRlRW1wdHlUaWxlQm9hcmQiLCJzdHJpbmdzIiwibnVtYmVycyIsIm1hcCIsInN0ciIsInRyaW0iLCJzcGxpdCIsInYiLCJwYXJzZUludCIsIm5Sb3dzIiwibGVuZ3RoIiwibkNvbHMiLCJib2FyZCIsImluc2VydFRpbGUiLCJwb3ciLCJqIiwidW5kZWZpbmVkIiwidGlsZSIsIndpdGhpbkJvdW5kcyIsInRpbGVPY2N1cGllZCIsImF2YWlsYWJsZVRpbGVzIiwiZ2V0QXZhaWxhYmxlVGlsZXMiLCJmbG9vciIsInJhbmRvbSIsImVhY2hUaWxlIiwicHVzaCIsImNhbGxiYWNrIiwidGlsZUF0Iiwiam9pbiIsInJlc3VsdCIsIkJvYXJkXzEiLCJ0eXBlc18xIiwiQm9hcmRNYW5hZ2VyIiwiYWN0dWF0b3IiLCJhY3R1YXRlIiwiZGlyZWN0aW9uIiwiRGlyZWN0aW9uIiwiVXAiLCJ4IiwieSIsIkRvd24iLCJMZWZ0IiwiUmlnaHQiLCJmaXJzdCIsInNlY29uZCIsInZlY3RvciIsIkdFVF9WRUNUT1IiLCJ0cmF2ZXJzYWxzIiwiYnVpbGRUcmF2ZXJzYWxzIiwibW92ZWQiLCJwcmVwYXJlVGlsZXMiLCJjb3VudE1lcmdlZCIsInNjb3JlIiwiZm9yRWFjaCIsInRpbGVQb3NpdGlvbiIsInBvc2l0aW9ucyIsImZpbmRGYXJ0aGVzdFBvc2l0aW9uIiwibmV4dCIsIm1lcmdlZEZyb20iLCJtZXJnZWQiLCJyZW1vdmVUaWxlIiwidXBkYXRlUG9zaXRpb24iLCJtb3ZlVGlsZSIsImZhcnRoZXN0IiwicG9zaXRpb25zRXF1YWwiLCJzY29yZU9idGFpbmVkIiwidGlsZU1hdGNoZXNBdmFpbGFibGUiLCJzYXZlUG9zaXRpb24iLCJyZXZlcnNlIiwiZGlyZWN0aW9ucyIsInNvbWUiLCJvdGhlclRpbGUiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJ0aWxlQXZhaWxhYmxlIiwiQm9hcmRNYW5hZ2VyXzEiLCJHYW1lTWFuYWdlcl8xIiwiSFRNTEFjdHVhdG9yXzEiLCJ2aWV3ZXJRdWVyeVByZWZpeCIsIm5Sb3ciLCJuQ29sIiwiZ2FtZUludGVydmFsTWluIiwiZ2FtZUludGVydmFsTWF4IiwiaW5pdGlhbFRpbWVMZWZ0IiwiYm1zIiwidGltZXJJZCIsInR1cm5UZXh0IiwicmVzdWx0c0RpdiIsIndpbm5lclRleHQiLCJyZWFzb25UZXh0IiwidG9nZ2xlQnV0dG9uIiwidHVyblNsaWRlciIsImNvbW1hbmRzIiwicmVzdWx0c0F2YWlsYWJsZSIsIm5leHRUdXJuIiwiY3VycmVudFNjb3JlcyIsImN1cnJlbnRUaW1lTGVmdCIsImdhbWVJbnRlcnZhbCIsInNjb3JlVGV4dHMiLCJ0aW1lTGVmdFRleHRzIiwicGxheWVyRGl2cyIsInVwZGF0ZVR1cm4iLCJpbm5lclRleHQiLCJTdHJpbmciLCJ0dXJuUGxheWVyIiwiZSIsImNsYXNzTmFtZSIsInRleHRDb250ZW50Iiwicm91bmQiLCJhZHZhbmNlRnJhbWUiLCJzdG9wQW5pbWF0aW9uIiwib2JqIiwiY29uc29sZSIsImxvZyIsImFpaW5wdXQiLCJhaW91dHB1dCIsImNvbW1hbmQiLCJkaXJDb21tYW5kIiwiYXR0YWNrIiwiZGlyIiwiR2FtZU1hbmFnZXIiLCJESVJFQ1RJT05TX01BUCIsIm1vdmUiLCJwYXJzZWQiLCJQQVJTRV9BVFRBQ0tfQ09NTUFORCIsInJ1bnRpbWUiLCJ0aW1lckhhbmRsZSIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJmb3JjZVVwZGF0ZVR1cm4iLCJ0dXJuIiwicHJldmlvdXNseVJ1bm5pbmciLCJibSIsInNldHVwIiwiaW5wdXRTdHJpbmciLCJpbnB1dFN0cmluZ3MiLCJGUk9NX1NUUklOR1MiLCJzbGljZSIsIl8iLCJ0aW1lTGVmdCIsInNjb3JlTWUiLCJzY29yZU90aGVyIiwicHJlSW5wdXQiLCJwcmVSdW50aW1lIiwicHJldlRpbWVMZWZ0Iiwic3RhcnRBbmltYXRpb24iLCJjbGVhclRpbWVvdXQiLCJzdGFydFR1cm4iLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50V2l0aENsYXNzIiwidGFnTmFtZSIsImVsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJsb2FkRmlsZSIsImlucHV0RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJmaWxlcyIsImZpbGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicHJlcHJvY2Vzc1JlcGxheSIsIkpTT04iLCJwYXJzZSIsImFsZXJ0IiwicmVhZEFzVGV4dCIsInJlcGxheSIsIkFycmF5IiwiaXNBcnJheSIsImdhbWVSZXN1bHQiLCJ3aW5uZXIiLCJkZWZlYXRSZWFzb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZnJhbWVRdWVyeSIsImdhbWVDb250YWluZXIiLCJncmlkQ29udGFpbmVyIiwiZ3JpZFJvdyIsImFwcGVuZENoaWxkIiwidGlsZUNvbnRhaW5lciIsIkhUTUxBY3R1YXRvciIsInNsaWRlciIsInRvR2FtZUludGVydmFsIiwiZXZlbnQiLCJ0YXJnZXQiLCJmaWxlSW5wdXQiLCJyZWxvYWRCdXR0b24iLCJvbmNsaWNrIiwicHJldkJ1dHRvbiIsIm1heCIsIm5leHRCdXR0b24iLCJwcmVwYXJlQnV0dG9ucyIsInJlbW92ZSIsInRyeUxvYWRpbmdXaW5kb3dSZXBsYXkiLCJmaXJzdFBsYXllciIsInNlY29uZFBsYXllciIsImlvTG9nIiwicnVubmVycyIsImVuZW15Qm9hcmQiLCJldmVyeSIsImlzUG9zaXRpdmVJbnRlZ2VyIiwidmVyZGljdCIsInJlYXNvbiIsIk0iLCJWIiwidmVjIiwiUE9TSVRJVkVfUkVHRVhQIiwidGVzdCIsImNvbnN1bWVkVGltZXNOcyIsInNjb3JlcyIsInRpbWVMZWZ0cyIsIlRPVEFMX01BSU5fVElNRV9NUyIsImJvYXJkcyIsIkJPQVJEX05VTV9ST1dTIiwiQk9BUkRfTlVNX0NPTFMiLCJidWlsZFJlc3VsdCIsInN0YXRzIiwidGltZSIsInBsYXllciIsInJ1bm5lciIsImlucHV0IiwicmV0Iiwic2VuZEFuZFJlY2VpdmVEYXRhIiwiSU5USUFMSVpFX1RJTUVfTVMiLCJydW50aW1lTnMiLCJvdXRwdXQiLCJpbml0aWFsVGlsZSIsIk1BWF9UVVJOIiwibXlCb2FyZCIsIk1BSU5fVFVSTl9USU1FX01TIiwibW92ZWRSZXN1bHQiLCJ1c2VkVmFsdWUiLCJmaWxlTmFtZSIsIk1hcCIsImdyaWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhckNvbnRhaW5lciIsImNvbHVtbiIsImNlbGwiLCJhZGRUaWxlIiwiY29udGFpbmVyIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwid3JhcHBlciIsImlubmVyIiwicG9zaXRpb25DbGFzcyIsImNsYXNzZXMiLCJhcHBseUNsYXNzZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJlbGVtZW50IiwiY29udGVudCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeSIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiZm4iLCJtZW1vIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtZW1vaXplIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJwYXJlbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsInVwZGF0ZSIsImRlZmF1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFB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QUFBQSxFQUNBLE9BQUFBLEVBR0EsSUFBQXdELEVBQUFELEVBQUFFLFNBQUEsS0FBQUYsRUFBQUcsS0FDQUMsRUFBQUgsRUFBQUQsRUFBQUssU0FBQUMsUUFBQSxpQkEyREEsT0EvQkE3RCxFQUFBNkQsUUFBQSwrREFBQUMsRUFBQUMsR0FFQSxJQVdBQyxFQVhBQyxFQUFBRixFQUNBNVcsT0FDQTBXLFFBQUEsb0JBQUF4WixFQUFBNlosR0FBd0MsT0FBQUEsSUFDeENMLFFBQUEsb0JBQUF4WixFQUFBNlosR0FBd0MsT0FBQUEsSUFHeEMsMERBQUFySyxLQUFBb0ssR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBcEQsUUFBQSxNQUVBb0QsRUFDRyxJQUFBQSxFQUFBcEQsUUFBQSxLQUVIMkMsRUFBQVMsRUFHQU4sRUFBQU0sRUFBQUosUUFBQSxZQUlBLE9BQUE1TSxLQUFBdUcsVUFBQXdHLEdBQUEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsImltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBUaWxlIHtcbiAgcHVibGljIHJvdzogbnVtYmVyO1xuICBwdWJsaWMgY29sOiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZT86IG51bWJlcjtcbiAgcHVibGljIG1lcmdlZEZyb20/OiBUaWxlW107XG4gIHB1YmxpYyBwcmV2aW91c1Bvc2l0aW9uPzogUG9zaXRpb247XG5cbiAgY29uc3RydWN0b3IocG9zaXRpb246IFBvc2l0aW9uLCBpbml0aWFsVmFsdWU/OiBudW1iZXIpIHtcbiAgICB0aGlzLnJvdyA9IHBvc2l0aW9uLnJvdztcbiAgICB0aGlzLmNvbCA9IHBvc2l0aW9uLmNvbDtcbiAgICB0aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICB9XG5cbiAgcHVibGljIHNhdmVQb3NpdGlvbigpIHtcbiAgICB0aGlzLnByZXZpb3VzUG9zaXRpb24gPSB7IHJvdzogdGhpcy5yb3csIGNvbDogdGhpcy5jb2wgfTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVQb3NpdGlvbihwb3NpdGlvbjogUG9zaXRpb24pIHtcbiAgICB0aGlzLnJvdyA9IHBvc2l0aW9uLnJvdztcbiAgICB0aGlzLmNvbCA9IHBvc2l0aW9uLmNvbDtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgcmV0dXJuIE1hdGgubG9nMih0aGlzLnZhbHVlKS50b1N0cmluZygxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBUaWxlIH0gZnJvbSAnLi9UaWxlJztcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBCb2FyZCB7XG4gIHB1YmxpYyByZWFkb25seSB0aWxlczogVGlsZVtdW107XG5cbiAgcHJpdmF0ZSByZWFkb25seSBuYlJvd3M6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBuYkNvbHM6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihyb3dzOiBudW1iZXIsIGNvbHM6IG51bWJlcikge1xuICAgIHRoaXMubmJSb3dzID0gcm93cztcbiAgICB0aGlzLm5iQ29scyA9IGNvbHM7XG4gICAgdGhpcy50aWxlcyA9IEJvYXJkLmNyZWF0ZUVtcHR5VGlsZUJvYXJkKHRoaXMubmJSb3dzLCB0aGlzLm5iQ29scyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEZST01fU1RSSU5HUyhzdHJpbmdzOiBzdHJpbmdbXSk6IEJvYXJkIHtcbiAgICAvLyBUT0RPIGFzc2VydCBpbnZhbGlkIGlucHV0XG4gICAgY29uc3QgbnVtYmVycyA9IHN0cmluZ3MubWFwKHN0ciA9PlxuICAgICAgc3RyXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnNwbGl0KCcgJylcbiAgICAgICAgLm1hcCh2ID0+IHBhcnNlSW50KHYsIDEwKSlcbiAgICApO1xuICAgIGNvbnN0IG5Sb3dzID0gbnVtYmVycy5sZW5ndGg7XG4gICAgY29uc3QgbkNvbHMgPSBudW1iZXJzWzBdLmxlbmd0aDtcbiAgICBjb25zdCBib2FyZCA9IG5ldyBCb2FyZChuUm93cywgbkNvbHMpO1xuXG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgblJvd3M7IHJvdysrKSB7XG4gICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBuQ29sczsgY29sKyspIHtcbiAgICAgICAgaWYgKG51bWJlcnNbcm93XVtjb2xdID4gMCkge1xuICAgICAgICAgIGJvYXJkLmluc2VydFRpbGUobmV3IFRpbGUoeyByb3csIGNvbCB9LCBNYXRoLnBvdygyLCBudW1iZXJzW3Jvd11bY29sXSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYm9hcmQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVFbXB0eVRpbGVCb2FyZChuYlJvd3M6IG51bWJlciwgbmJDb2xzOiBudW1iZXIpIHtcbiAgICBjb25zdCB0aWxlczogVGlsZVtdW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmJSb3dzOyBpKyspIHtcbiAgICAgIHRpbGVzW2ldID0gW107XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5iQ29sczsgaisrKSB7XG4gICAgICAgIHRpbGVzW2ldW2pdID0gbmV3IFRpbGUoeyByb3c6IGksIGNvbDogaiB9LCB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGlsZXM7XG4gIH1cblxuICBwdWJsaWMgd2l0aGluQm91bmRzKHBvc2l0aW9uOiBQb3NpdGlvbikge1xuICAgIHJldHVybiBwb3NpdGlvbi5yb3cgPj0gMCAmJiBwb3NpdGlvbi5yb3cgPCB0aGlzLm5iUm93cyAmJiBwb3NpdGlvbi5jb2wgPj0gMCAmJiBwb3NpdGlvbi5jb2wgPCB0aGlzLm5iQ29scztcbiAgfVxuXG4gIHB1YmxpYyBpbnNlcnRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICB0aGlzLnRpbGVzW3RpbGUucm93XVt0aWxlLmNvbF0gPSB0aWxlO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZVRpbGUodGlsZTogVGlsZSkge1xuICAgIHRoaXMudGlsZXNbdGlsZS5yb3ddW3RpbGUuY29sXSA9IG5ldyBUaWxlKHsgcm93OiB0aWxlLnJvdywgY29sOiB0aWxlLmNvbCB9LCB1bmRlZmluZWQpO1xuICB9XG5cbiAgcHVibGljIHRpbGVBdChwb3NpdGlvbjogUG9zaXRpb24pIHtcbiAgICBpZiAodGhpcy53aXRoaW5Cb3VuZHMocG9zaXRpb24pICYmIHRoaXMudGlsZXNbcG9zaXRpb24ucm93XVtwb3NpdGlvbi5jb2xdLnZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50aWxlc1twb3NpdGlvbi5yb3ddW3Bvc2l0aW9uLmNvbF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRpbGVBdmFpbGFibGUocG9zaXRpb246IFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICF0aGlzLnRpbGVPY2N1cGllZChwb3NpdGlvbik7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmFuZG9tQXZhaWxhYmxlVGlsZSgpIHtcbiAgICBjb25zdCBhdmFpbGFibGVUaWxlcyA9IHRoaXMuZ2V0QXZhaWxhYmxlVGlsZXMoKTtcbiAgICBpZiAoYXZhaWxhYmxlVGlsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYXZhaWxhYmxlVGlsZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXZhaWxhYmxlVGlsZXMubGVuZ3RoKV07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldEF2YWlsYWJsZVRpbGVzKCkge1xuICAgIGNvbnN0IGF2YWlsYWJsZVRpbGVzOiBUaWxlW10gPSBbXTtcbiAgICB0aGlzLmVhY2hUaWxlKChyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIHRpbGU6IFRpbGUpID0+IHtcbiAgICAgIGlmICghdGlsZS52YWx1ZSkge1xuICAgICAgICBhdmFpbGFibGVUaWxlcy5wdXNoKG5ldyBUaWxlKHsgcm93LCBjb2wgfSwgdW5kZWZpbmVkKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGF2YWlsYWJsZVRpbGVzO1xuICB9XG5cbiAgcHVibGljIGVhY2hUaWxlKGNhbGxiYWNrOiAocm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCB0aWxlOiBUaWxlKSA9PiBhbnkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmJSb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5uYkNvbHM7IGorKykge1xuICAgICAgICBjYWxsYmFjayhpLCBqLCB0aGlzLnRpbGVzW2ldW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdGlsZU9jY3VwaWVkKHBvc2l0aW9uOiBQb3NpdGlvbikge1xuICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVBdChwb3NpdGlvbik7XG4gICAgaWYgKHRpbGUpIHtcbiAgICAgIHJldHVybiAhIXRpbGUudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnRpbGVzLm1hcChyb3cgPT4gcm93Lm1hcCh0aWxlID0+IHRpbGUudG9TdHJpbmcoKSkuam9pbignICcpKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgQm9hcmQodGhpcy5uYlJvd3MsIHRoaXMubmJDb2xzKTtcbiAgICB0aGlzLmVhY2hUaWxlKChyb3csIGNvbCwgdGlsZSkgPT4ge1xuICAgICAgaWYgKHRpbGUgJiYgdGlsZS52YWx1ZSAmJiB0aWxlLnZhbHVlID4gMCkge1xuICAgICAgICByZXN1bHQuaW5zZXJ0VGlsZShuZXcgVGlsZSh7IHJvdywgY29sIH0sIHRpbGUudmFsdWUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBIVE1MQWN0dWF0b3IgfSBmcm9tICcuLi8uLi8uLi92aWV3ZXIvc3JjL0hUTUxBY3R1YXRvcic7XG5pbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4vQm9hcmQnO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vVGlsZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb24sIE1vdmVkUmVzdWx0LCBQb3NpdGlvbiwgVmVjdG9yMiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQm9hcmRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZGlyZWN0aW9ucyA9IFtEaXJlY3Rpb24uVXAsIERpcmVjdGlvbi5Eb3duLCBEaXJlY3Rpb24uTGVmdCwgRGlyZWN0aW9uLlJpZ2h0XTtcbiAgcHVibGljIGJvYXJkOiBCb2FyZDtcbiAgcHJpdmF0ZSByZWFkb25seSBuYlJvd3M6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBuYkNvbHM6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBhY3R1YXRvcj86IEhUTUxBY3R1YXRvcjtcblxuICBjb25zdHJ1Y3Rvcihyb3dzOiBudW1iZXIsIGNvbHM6IG51bWJlciwgYm9hcmQ/OiBCb2FyZCwgYWN0dWF0b3I/OiBIVE1MQWN0dWF0b3IpIHtcbiAgICB0aGlzLm5iUm93cyA9IHJvd3M7XG4gICAgdGhpcy5uYkNvbHMgPSBjb2xzO1xuXG4gICAgaWYgKCFib2FyZCkge1xuICAgICAgdGhpcy5ib2FyZCA9IG5ldyBCb2FyZCh0aGlzLm5iUm93cywgdGhpcy5uYkNvbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XG4gICAgfVxuXG4gICAgdGhpcy5hY3R1YXRvciA9IGFjdHVhdG9yO1xuICAgIHRoaXMuYWN0dWF0ZSgpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHRVRfVkVDVE9SKGRpcmVjdGlvbjogRGlyZWN0aW9uKTogVmVjdG9yMiB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgRGlyZWN0aW9uLlVwOiB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IC0xIH07XG4gICAgICB9XG4gICAgICBjYXNlIERpcmVjdGlvbi5Eb3duOiB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDEgfTtcbiAgICAgIH1cbiAgICAgIGNhc2UgRGlyZWN0aW9uLkxlZnQ6IHtcbiAgICAgICAgcmV0dXJuIHsgeDogLTEsIHk6IDAgfTtcbiAgICAgIH1cbiAgICAgIGNhc2UgRGlyZWN0aW9uLlJpZ2h0OiB7XG4gICAgICAgIHJldHVybiB7IHg6IDEsIHk6IDAgfTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHBvc2l0aW9uc0VxdWFsKGZpcnN0OiBQb3NpdGlvbiwgc2Vjb25kOiBQb3NpdGlvbikge1xuICAgIHJldHVybiBmaXJzdC5yb3cgPT09IHNlY29uZC5yb3cgJiYgZmlyc3QuY29sID09PSBzZWNvbmQuY29sO1xuICB9XG5cbiAgcHVibGljIG1vdmUoZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiBNb3ZlZFJlc3VsdCB7XG4gICAgY29uc3QgdmVjdG9yID0gQm9hcmRNYW5hZ2VyLkdFVF9WRUNUT1IoZGlyZWN0aW9uKTtcbiAgICBjb25zdCB0cmF2ZXJzYWxzID0gdGhpcy5idWlsZFRyYXZlcnNhbHModmVjdG9yKTtcbiAgICBsZXQgbW92ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMucHJlcGFyZVRpbGVzKCk7XG5cbiAgICBsZXQgY291bnRNZXJnZWQgPSAwO1xuICAgIGxldCBzY29yZSA9IDA7XG4gICAgdHJhdmVyc2Fscy5yb3cuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgdHJhdmVyc2Fscy5jb2wuZm9yRWFjaChjb2wgPT4ge1xuICAgICAgICBjb25zdCB0aWxlUG9zaXRpb24gPSB7IHJvdzogcm93LCBjb2w6IGNvbCB9O1xuICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5ib2FyZC50aWxlQXQodGlsZVBvc2l0aW9uKTtcblxuICAgICAgICBpZiAodGlsZSAmJiB0aWxlLnZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5maW5kRmFydGhlc3RQb3NpdGlvbih0aWxlUG9zaXRpb24sIHZlY3Rvcik7XG4gICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYm9hcmQudGlsZUF0KHBvc2l0aW9ucy5uZXh0KTtcblxuICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQudmFsdWUgPT09IHRpbGUudmFsdWUgJiYgIW5leHQubWVyZ2VkRnJvbSkge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbmV3IFRpbGUocG9zaXRpb25zLm5leHQsIHRpbGUudmFsdWUgKiAyKTtcbiAgICAgICAgICAgIG1lcmdlZC5tZXJnZWRGcm9tID0gW3RpbGUsIG5leHRdO1xuXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmluc2VydFRpbGUobWVyZ2VkKTtcbiAgICAgICAgICAgIHRoaXMuYm9hcmQucmVtb3ZlVGlsZSh0aWxlKTtcblxuICAgICAgICAgICAgdGlsZS51cGRhdGVQb3NpdGlvbihwb3NpdGlvbnMubmV4dCk7XG5cbiAgICAgICAgICAgIGNvdW50TWVyZ2VkKys7XG4gICAgICAgICAgICBzY29yZSArPSB0aWxlLnZhbHVlICogMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb3ZlVGlsZSh0aWxlLCBwb3NpdGlvbnMuZmFydGhlc3QpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghQm9hcmRNYW5hZ2VyLnBvc2l0aW9uc0VxdWFsKHRpbGVQb3NpdGlvbiwgdGlsZSkpIHtcbiAgICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKG1vdmVkKSB7XG4gICAgICB0aGlzLmFjdHVhdGUoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1vdmVkOiB0cnVlLFxuICAgICAgICBjb3VudE1lcmdlZCxcbiAgICAgICAgc2NvcmVPYnRhaW5lZDogc2NvcmUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtb3ZlZDogZmFsc2UsXG4gICAgICBjb3VudE1lcmdlZDogMCxcbiAgICAgIHNjb3JlT2J0YWluZWQ6IDAsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhY3R1YXRlKCkge1xuICAgIGlmICh0aGlzLmFjdHVhdG9yKSB7XG4gICAgICB0aGlzLmFjdHVhdG9yLmFjdHVhdGUodGhpcy5ib2FyZC50aWxlcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1vdmVzQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLmJvYXJkLmdldEF2YWlsYWJsZVRpbGVzKCkubGVuZ3RoID4gMCB8fCB0aGlzLnRpbGVNYXRjaGVzQXZhaWxhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9hcmQudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBwcmVwYXJlVGlsZXMoKSB7XG4gICAgdGhpcy5ib2FyZC5lYWNoVGlsZSgoeDogbnVtYmVyLCB5OiBudW1iZXIsIHRpbGU6IFRpbGUpID0+IHtcbiAgICAgIGlmICh0aWxlLnZhbHVlKSB7XG4gICAgICAgIHRpbGUubWVyZ2VkRnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGlsZS5zYXZlUG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXR1cCgpIHtcbiAgICB0aGlzLmJvYXJkID0gbmV3IEJvYXJkKHRoaXMubmJSb3dzLCB0aGlzLm5iQ29scyk7XG4gICAgdGhpcy5hY3R1YXRlKCk7XG4gIH1cblxuICBwdWJsaWMgYnVpbGRUcmF2ZXJzYWxzKHZlY3RvcjogVmVjdG9yMikge1xuICAgIGNvbnN0IHRyYXZlcnNhbHM6IHsgcm93OiBudW1iZXJbXTsgY29sOiBudW1iZXJbXSB9ID0geyByb3c6IFtdLCBjb2w6IFtdIH07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmJSb3dzOyBpKyspIHtcbiAgICAgIHRyYXZlcnNhbHMucm93LnB1c2goaSk7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5uYkNvbHM7IGorKykge1xuICAgICAgdHJhdmVyc2Fscy5jb2wucHVzaChqKTtcbiAgICB9XG4gICAgaWYgKHZlY3Rvci54ID09PSAxKSB7XG4gICAgICB0cmF2ZXJzYWxzLmNvbCA9IHRyYXZlcnNhbHMuY29sLnJldmVyc2UoKTtcbiAgICB9XG4gICAgaWYgKHZlY3Rvci55ID09PSAxKSB7XG4gICAgICB0cmF2ZXJzYWxzLnJvdyA9IHRyYXZlcnNhbHMucm93LnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhdmVyc2FscztcbiAgfVxuXG4gIHByaXZhdGUgdGlsZU1hdGNoZXNBdmFpbGFibGUoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5iUm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubmJDb2xzOyBqKyspIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuYm9hcmQudGlsZUF0KHsgcm93OiBpLCBjb2w6IGogfSk7XG5cbiAgICAgICAgaWYgKHRpbGUgJiYgdGlsZS52YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IG1vdmFibGUgPSBCb2FyZE1hbmFnZXIuZGlyZWN0aW9ucy5zb21lKFxuICAgICAgICAgICAgKGRpcmVjdGlvbik6IGJvb2xlYW4gPT4ge1xuICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSBCb2FyZE1hbmFnZXIuR0VUX1ZFQ1RPUihkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICBjb25zdCB0aWxlUG9zaXRpb24gPSB7IHJvdzogaSArIHZlY3Rvci55LCBjb2w6IGogKyB2ZWN0b3IueCB9O1xuICAgICAgICAgICAgICBjb25zdCBvdGhlclRpbGUgPSB0aGlzLmJvYXJkLnRpbGVBdCh0aWxlUG9zaXRpb24pO1xuICAgICAgICAgICAgICByZXR1cm4gISFvdGhlclRpbGUgJiYgb3RoZXJUaWxlLnZhbHVlID09PSB0aWxlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG1vdmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGZpbmRGYXJ0aGVzdFBvc2l0aW9uKHRpbGVQb3NpdGlvbjogUG9zaXRpb24sIHZlY3RvcjogVmVjdG9yMikge1xuICAgIGxldCBwcmV2aW91cztcbiAgICBsZXQgY3VycmVudCA9IHRpbGVQb3NpdGlvbjtcbiAgICBkbyB7XG4gICAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICBjdXJyZW50ID0geyByb3c6IHByZXZpb3VzLnJvdyArIHZlY3Rvci55LCBjb2w6IHByZXZpb3VzLmNvbCArIHZlY3Rvci54IH07XG4gICAgfSB3aGlsZSAodGhpcy5ib2FyZC53aXRoaW5Cb3VuZHMoY3VycmVudCkgJiYgdGhpcy5ib2FyZC50aWxlQXZhaWxhYmxlKGN1cnJlbnQpKTtcblxuICAgIHJldHVybiB7XG4gICAgICBmYXJ0aGVzdDogcHJldmlvdXMsXG4gICAgICBuZXh0OiBjdXJyZW50LFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIG1vdmVUaWxlKHRpbGU6IFRpbGUsIHBvc2l0aW9uOiBQb3NpdGlvbikge1xuICAgIHRoaXMuYm9hcmQucmVtb3ZlVGlsZSh0aWxlKTtcbiAgICB0aWxlLnVwZGF0ZVBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB0aGlzLmJvYXJkLmluc2VydFRpbGUodGlsZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogVGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0byBtb3ZlIHRoZSBib2FyZFxuICovXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuICBVcCA9ICdVUCcsXG4gIERvd24gPSAnRE9XTicsXG4gIExlZnQgPSAnTEVGVCcsXG4gIFJpZ2h0ID0gJ1JJR0hUJyxcbn1cblxuLyoqXG4gKiBUaGUgcG9zaXRpb24gb2YgYSB0aWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb24ge1xuICByb3c6IG51bWJlcjtcbiAgY29sOiBudW1iZXI7XG59XG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIDJEIHZlY3RvclxuICogeCBpcyB0aGUgaG9yaXpvbnRhbCBheGlzIGZyb20gbGVmdCB0byByaWdodFxuICogeSBpcyB0aGUgdmVydGljYWwgYXhpcyBmcm9tIHRvcCB0byBib3R0b21cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWZWN0b3IyIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW92ZWRSZXN1bHQge1xuICBtb3ZlZDogYm9vbGVhbjtcbiAgY291bnRNZXJnZWQ6IG51bWJlcjtcbiAgc2NvcmVPYnRhaW5lZDogbnVtYmVyO1xufVxuIiwiaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi8uLi9nYW1lL3NyYy9Db3JlL0JvYXJkJztcbmltcG9ydCB7IEJvYXJkTWFuYWdlciB9IGZyb20gJy4uLy4uL2dhbWUvc3JjL0NvcmUvQm9hcmRNYW5hZ2VyJztcbmltcG9ydCB7IFRpbGUgfSBmcm9tICcuLi8uLi9nYW1lL3NyYy9Db3JlL1RpbGUnO1xuaW1wb3J0IHsgR2FtZU1hbmFnZXIgfSBmcm9tICcuLi8uLi9nYW1lL3NyYy9HYW1lTWFuYWdlcic7XG5pbXBvcnQgeyBHYW1lUmVzdWx0LCBUdXJuUmVjb3JkIH0gZnJvbSAnLi4vLi4vZ2FtZS9zcmMvdHlwZXMnO1xuaW1wb3J0IHsgSFRNTEFjdHVhdG9yIH0gZnJvbSAnLi9IVE1MQWN0dWF0b3InO1xuaW1wb3J0ICcuL21haW4uc2Nzcyc7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8taW1wb3J0LXNpZGUtZWZmZWN0XG5cbmNvbnN0IHZpZXdlclF1ZXJ5UHJlZml4ID0gJy5idXR0bGUtMjA0OC12aWV3ZXInO1xuXG5jb25zdCBuUm93ID0gNTtcbmNvbnN0IG5Db2wgPSA1O1xuXG5jb25zdCBnYW1lSW50ZXJ2YWxNaW4gPSAxMDA7XG5jb25zdCBnYW1lSW50ZXJ2YWxNYXggPSAxMDAwO1xuY29uc3QgaW5pdGlhbFRpbWVMZWZ0ID0gMTAwICogMTAwMDtcblxuY29uc3QgYm1zOiBCb2FyZE1hbmFnZXJbXSA9IFtdO1xubGV0IGNvbW1hbmRzOiBUdXJuUmVjb3JkW10gPSBbXTtcbmxldCByZXN1bHRzQXZhaWxhYmxlID0gZmFsc2U7XG5cbmxldCBuZXh0VHVybiA9IDA7XG5sZXQgY3VycmVudFNjb3JlcyA9IFswLCAwXTtcbmxldCBjdXJyZW50VGltZUxlZnQgPSBbaW5pdGlhbFRpbWVMZWZ0LCBpbml0aWFsVGltZUxlZnRdO1xuXG5sZXQgZ2FtZUludGVydmFsID0gNTAwO1xubGV0IHRpbWVySWQ6IG51bWJlciB8IHVuZGVmaW5lZDtcblxubGV0IHR1cm5UZXh0OiBIVE1MRWxlbWVudCB8IG51bGw7XG5sZXQgc2NvcmVUZXh0czogKEhUTUxFbGVtZW50IHwgbnVsbClbXSA9IFtdO1xubGV0IHRpbWVMZWZ0VGV4dHM6IChIVE1MRWxlbWVudCB8IG51bGwpW10gPSBbXTtcbmxldCBwbGF5ZXJEaXZzOiAoSFRNTEVsZW1lbnQgfCBudWxsKVtdID0gW107XG5sZXQgcmVzdWx0c0RpdjogSFRNTEVsZW1lbnQgfCBudWxsO1xubGV0IHdpbm5lclRleHQ6IEhUTUxFbGVtZW50IHwgbnVsbDtcbmxldCByZWFzb25UZXh0OiBIVE1MRWxlbWVudCB8IG51bGw7XG5sZXQgdG9nZ2xlQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGw7XG5sZXQgdHVyblNsaWRlcjogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XG5cbmZ1bmN0aW9uIHVwZGF0ZVR1cm4oKSB7XG4gIGlmICh0dXJuVGV4dCkge1xuICAgIHR1cm5UZXh0LmlubmVyVGV4dCA9IFN0cmluZyhNYXRoLmZsb29yKChuZXh0VHVybiArIDEpIC8gMikpO1xuICB9XG4gIGNvbnN0IHR1cm5QbGF5ZXIgPSBuZXh0VHVybiAlIDI7XG4gIHBsYXllckRpdnMuZm9yRWFjaCgoZSwgaSkgPT4ge1xuICAgIGlmIChlKSB7XG4gICAgICBlLmNsYXNzTmFtZSA9IGkgPT09IHR1cm5QbGF5ZXIgPyAncGxheWVyIHR1cm4tcGxheWVyJyA6ICdwbGF5ZXInO1xuICAgIH1cbiAgfSk7XG5cbiAgc2NvcmVUZXh0cy5mb3JFYWNoKChlLCBpKSA9PiB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUudGV4dENvbnRlbnQgPSBTdHJpbmcoY3VycmVudFNjb3Jlc1tpXSk7XG4gICAgfVxuICB9KTtcblxuICB0aW1lTGVmdFRleHRzLmZvckVhY2goKGUsIGkpID0+IHtcbiAgICBpZiAoZSkge1xuICAgICAgZS50ZXh0Q29udGVudCA9IFN0cmluZyhNYXRoLnJvdW5kKGN1cnJlbnRUaW1lTGVmdFtpXSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHJlc3VsdHNEaXYpIHtcbiAgICBpZiAobmV4dFR1cm4gPj0gY29tbWFuZHMubGVuZ3RoIC0gMSAmJiByZXN1bHRzQXZhaWxhYmxlKSB7XG4gICAgICByZXN1bHRzRGl2LmNsYXNzTmFtZSA9ICdyZXN1bHRzIHJlc3VsdHMtc2hvdyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHNEaXYuY2xhc3NOYW1lID0gJ3Jlc3VsdHMgcmVzdWx0cy1oaWRlJztcbiAgICB9XG4gIH1cblxuICBpZiAodHVyblNsaWRlcikge1xuICAgIHR1cm5TbGlkZXIudmFsdWUgPSBuZXh0VHVybi50b1N0cmluZygxMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWR2YW5jZUZyYW1lKCkge1xuICBpZiAoY29tbWFuZHMubGVuZ3RoIDw9IG5leHRUdXJuKSB7XG4gICAgc3RvcEFuaW1hdGlvbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9iaiA9IGNvbW1hbmRzW25leHRUdXJuXTtcbiAgY29uc29sZS5sb2cob2JqLCBvYmouYWlpbnB1dCwgb2JqLmFpb3V0cHV0KTtcbiAgaWYgKG9iai5haW91dHB1dCkge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBvYmouYWlvdXRwdXQuc3BsaXQoJyAnKTtcbiAgICBpZiAobmV4dFR1cm4gPCAyKSB7XG4gICAgICAvLyBwdXQgaW5pdGlhbCB0aWxlc1xuICAgICAgY29uc3QgW3JvdywgY29sXSA9IGNvbW1hbmQubWFwKHYgPT4ge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodiwgMTApIC0gMTtcbiAgICAgIH0pO1xuICAgICAgYm1zWyhuZXh0VHVybiArIDEpICUgMl0uYm9hcmQuaW5zZXJ0VGlsZShuZXcgVGlsZSh7IHJvdywgY29sIH0sIDIpKTtcbiAgICAgIGJtc1sobmV4dFR1cm4gKyAxKSAlIDJdLmFjdHVhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW2RpckNvbW1hbmQsIC4uLmF0dGFja10gPSBjb21tYW5kO1xuXG4gICAgICAvLyBNb3ZlXG4gICAgICBjb25zdCBkaXIgPSBHYW1lTWFuYWdlci5ESVJFQ1RJT05TX01BUC5nZXQoZGlyQ29tbWFuZCk7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGJtc1tuZXh0VHVybiAlIDJdLm1vdmUoZGlyKTtcbiAgICAgICAgY3VycmVudFNjb3Jlc1tuZXh0VHVybiAlIDJdICs9IHJlc3VsdC5zY29yZU9idGFpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2tcbiAgICAgIGJtc1sobmV4dFR1cm4gKyAxKSAlIDJdLnByZXBhcmVUaWxlcygpO1xuICAgICAgY29uc3QgcGFyc2VkID0gR2FtZU1hbmFnZXIuUEFSU0VfQVRUQUNLX0NPTU1BTkQoYXR0YWNrLCBibXNbKG5leHRUdXJuICsgMSkgJSAyXS5ib2FyZCk7XG4gICAgICBpZiAocGFyc2VkLnRpbGVzKSB7XG4gICAgICAgIHBhcnNlZC50aWxlcy5mb3JFYWNoKHRpbGUgPT4ge1xuICAgICAgICAgIGJtc1sobmV4dFR1cm4gKyAxKSAlIDJdLmJvYXJkLmluc2VydFRpbGUodGlsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBibXNbKG5leHRUdXJuICsgMSkgJSAyXS5hY3R1YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmoucnVudGltZSkge1xuICAgICAgICBjdXJyZW50VGltZUxlZnRbbmV4dFR1cm4gJSAyXSAtPSBvYmoucnVudGltZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVUdXJuKCk7XG5cbiAgbmV4dFR1cm4rKztcbn1cblxuZnVuY3Rpb24gdGltZXJIYW5kbGUoKSB7XG4gIGFkdmFuY2VGcmFtZSgpO1xuXG4gIHRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dCh0aW1lckhhbmRsZSwgZ2FtZUludGVydmFsKTtcbn1cblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVUdXJuKHR1cm46IG51bWJlcikge1xuICBpZiAodHVybiA+PSAwICYmIHR1cm4gPCBjb21tYW5kcy5sZW5ndGgpIHtcbiAgICBjb25zdCBwcmV2aW91c2x5UnVubmluZyA9ICEhdGltZXJJZDtcblxuICAgIHN0b3BBbmltYXRpb24oKTtcblxuICAgIGlmICh0dXJuIDwgMikge1xuICAgICAgYm1zLmZvckVhY2goYm0gPT4ge1xuICAgICAgICBibS5zZXR1cCgpO1xuICAgICAgfSk7XG5cbiAgICAgIG5leHRUdXJuID0gMDtcbiAgICAgIGN1cnJlbnRTY29yZXMgPSBbMCwgMF07XG4gICAgICBjdXJyZW50VGltZUxlZnQgPSBbaW5pdGlhbFRpbWVMZWZ0LCBpbml0aWFsVGltZUxlZnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnB1dFN0cmluZyA9IGNvbW1hbmRzW3R1cm5dLmFpaW5wdXQ7XG4gICAgICBpZiAoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaW5wdXRTdHJpbmdzID0gaW5wdXRTdHJpbmcuc3BsaXQoJ1xcbicpO1xuICAgICAgICBibXNbdHVybiAlIDJdLmJvYXJkID0gQm9hcmQuRlJPTV9TVFJJTkdTKGlucHV0U3RyaW5ncy5zbGljZSgxLCBuUm93ICsgMSkpO1xuICAgICAgICBibXNbKHR1cm4gKyAxKSAlIDJdLmJvYXJkID0gQm9hcmQuRlJPTV9TVFJJTkdTKGlucHV0U3RyaW5ncy5zbGljZShuUm93ICsgMSwgblJvdyAqIDIgKyAxKSk7XG5cbiAgICAgICAgY29uc3QgW18sIHRpbWVMZWZ0LCBzY29yZU1lLCBzY29yZU90aGVyXSA9IGlucHV0U3RyaW5nc1swXS5zcGxpdCgnICcpLm1hcCh2ID0+IHBhcnNlSW50KHYsIDEwKSk7XG4gICAgICAgIGN1cnJlbnRTY29yZXMgPSB0dXJuICUgMiA9PT0gMCA/IFtzY29yZU1lLCBzY29yZU90aGVyXSA6IFtzY29yZU90aGVyLCBzY29yZU1lXTtcbiAgICAgICAgY3VycmVudFRpbWVMZWZ0W3R1cm4gJSAyXSA9IHRpbWVMZWZ0O1xuXG4gICAgICAgIGlmICh0dXJuID09PSAyKSB7XG4gICAgICAgICAgY3VycmVudFRpbWVMZWZ0WzFdID0gaW5pdGlhbFRpbWVMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHsgYWlpbnB1dDogcHJlSW5wdXQsIHJ1bnRpbWU6IHByZVJ1bnRpbWUgfSA9IGNvbW1hbmRzW3R1cm4gLSAxXTtcbiAgICAgICAgICBpZiAocHJlSW5wdXQgJiYgcHJlUnVudGltZSkge1xuICAgICAgICAgICAgY29uc3QgcHJldlRpbWVMZWZ0ID0gcGFyc2VJbnQocHJlSW5wdXQuc3BsaXQoJ1xcbicpWzBdLnNwbGl0KCcgJylbMV0sIDEwKTtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lTGVmdFsodHVybiArIDEpICUgMl0gPSBwcmV2VGltZUxlZnQgLSBwcmVSdW50aW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYm1zLmZvckVhY2goYm0gPT4ge1xuICAgICAgICBibS5wcmVwYXJlVGlsZXMoKTtcbiAgICAgICAgYm0uYWN0dWF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBuZXh0VHVybiA9IHR1cm4gLSAxO1xuICAgIH1cbiAgICB1cGRhdGVUdXJuKCk7XG5cbiAgICAvLyB0ZW1wb3JhcnkgZml4IHRvIHNob3cgYWNjdXJhdGUgdHVybiBudW1iZXJcbiAgICBuZXh0VHVybiA9IHR1cm4gPCAyID8gMCA6IHR1cm47XG5cbiAgICBpZiAocHJldmlvdXNseVJ1bm5pbmcpIHtcbiAgICAgIHN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BBbmltYXRpb24oKSB7XG4gIGlmICh0aW1lcklkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICB9XG4gIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKHRvZ2dsZUJ1dHRvbikge1xuICAgIHRvZ2dsZUJ1dHRvbi50ZXh0Q29udGVudCA9ICflho3nlJ8nO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKCkge1xuICBzdG9wQW5pbWF0aW9uKCk7XG5cbiAgbGV0IHN0YXJ0VHVybiA9IDA7XG4gIGlmICh0dXJuU2xpZGVyKSB7XG4gICAgdHVyblNsaWRlci5zZXRBdHRyaWJ1dGUoJ21heCcsIChjb21tYW5kcy5sZW5ndGggLSAxKS50b1N0cmluZygxMCkpO1xuICAgIHN0YXJ0VHVybiA9IHBhcnNlSW50KHR1cm5TbGlkZXIudmFsdWUsIDEwKSArIDE7XG4gIH1cblxuICBmb3JjZVVwZGF0ZVR1cm4oc3RhcnRUdXJuKTtcblxuICBpZiAodG9nZ2xlQnV0dG9uKSB7XG4gICAgdG9nZ2xlQnV0dG9uLnRleHRDb250ZW50ID0gJ+WBnOatoic7XG4gIH1cblxuICB0aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQodGltZXJIYW5kbGUsIGdhbWVJbnRlcnZhbCwgc3RhcnRUdXJuKTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZpZWxkKCkge1xuICBbJyNwbGF5ZXItMSAuYm9hcmQtY29udGFpbmVyJywgJyNwbGF5ZXItMiAuYm9hcmQtY29udGFpbmVyJ10uZm9yRWFjaChmcmFtZVF1ZXJ5ID0+IHtcbiAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gJHtmcmFtZVF1ZXJ5fWApO1xuICAgIGlmIChnYW1lQ29udGFpbmVyKSB7XG4gICAgICBjb25zdCBncmlkQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnZGl2JywgJ2dyaWQtY29udGFpbmVyJyk7XG5cbiAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IG5Sb3c7IHJvdysrKSB7XG4gICAgICAgIGNvbnN0IGdyaWRSb3cgPSBjcmVhdGVFbGVtZW50V2l0aENsYXNzKCdkaXYnLCAnZ3JpZC1yb3cnKTtcbiAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgbkNvbDsgY29sKyspIHtcbiAgICAgICAgICBncmlkUm93LmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ2RpdicsICdncmlkLWNlbGwnKSk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JpZENvbnRhaW5lci5hcHBlbmRDaGlsZChncmlkUm93KTtcbiAgICAgIH1cbiAgICAgIGdhbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JpZENvbnRhaW5lcik7XG5cbiAgICAgIGNvbnN0IHRpbGVDb250YWluZXIgPSBjcmVhdGVFbGVtZW50V2l0aENsYXNzKCdkaXYnLCAndGlsZS1jb250YWluZXInKTtcbiAgICAgIGdhbWVDb250YWluZXIuYXBwZW5kQ2hpbGQodGlsZUNvbnRhaW5lcik7XG5cbiAgICAgIGJtcy5wdXNoKG5ldyBCb2FyZE1hbmFnZXIoblJvdywgbkNvbCwgdW5kZWZpbmVkLCBuZXcgSFRNTEFjdHVhdG9yKHRpbGVDb250YWluZXIpKSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFdpdGhDbGFzcyh0YWdOYW1lOiBzdHJpbmcsIGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBlbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuICByZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUJ1dHRvbnMoKSB7XG4gIC8vIG91dHB1dCBlbGVtZW50c1xuICB0dXJuVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dmlld2VyUXVlcnlQcmVmaXh9ICN0dXJuYCk7XG4gIGlmICh0dXJuVGV4dCkge1xuICAgIHR1cm5UZXh0LmlubmVyVGV4dCA9ICcwJztcbiAgfVxuXG4gIHNjb3JlVGV4dHMgPSBbXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI3Njb3JlLTFgKSxcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjc2NvcmUtMmApLFxuICBdO1xuICBzY29yZVRleHRzLmZvckVhY2goZSA9PiB7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUuaW5uZXJUZXh0ID0gJzAnO1xuICAgIH1cbiAgfSk7XG5cbiAgdGltZUxlZnRUZXh0cyA9IFtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjdGltZS1sZWZ0LTFgKSxcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjdGltZS1sZWZ0LTJgKSxcbiAgXTtcbiAgdGltZUxlZnRUZXh0cy5mb3JFYWNoKGUgPT4ge1xuICAgIGlmIChlKSB7XG4gICAgICBlLmlubmVyVGV4dCA9ICcwJztcbiAgICB9XG4gIH0pO1xuXG4gIHBsYXllckRpdnMgPSBbXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI3BsYXllci0xYCksXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI3BsYXllci0yYCksXG4gIF07XG5cbiAgcmVzdWx0c0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dmlld2VyUXVlcnlQcmVmaXh9ICNyZXN1bHRzYCk7XG4gIGlmIChyZXN1bHRzRGl2KSB7XG4gICAgcmVzdWx0c0Rpdi5jbGFzc05hbWUgPSAncmVzdWx0cyByZXN1bHRzLWhpZGUnO1xuICB9XG4gIHdpbm5lclRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjd2lubmVyYCk7XG4gIGlmICh3aW5uZXJUZXh0KSB7XG4gICAgd2lubmVyVGV4dC5pbm5lclRleHQgPSAnUExBWUVSIFggV0lOUyEnO1xuICB9XG4gIHJlYXNvblRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjcmVhc29uYCk7XG4gIGlmIChyZWFzb25UZXh0KSB7XG4gICAgcmVhc29uVGV4dC5pbm5lclRleHQgPSAnVU5ERUZJTkVEIFJFQVNPTic7XG4gIH1cblxuICAvLyBpbnB1dCBlbGVtZW50c1xuICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjZ2FtZS1pbnRlcnZhbC1zbGlkZXJgKTtcbiAgaWYgKHNsaWRlcikge1xuICAgIGNvbnN0IHRvR2FtZUludGVydmFsID0gKHg6IG51bWJlcikgPT4gZ2FtZUludGVydmFsTWF4IC0geCAqIChnYW1lSW50ZXJ2YWxNYXggLSBnYW1lSW50ZXJ2YWxNaW4pO1xuICAgIHNsaWRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgKChnYW1lSW50ZXJ2YWxNYXggLSBnYW1lSW50ZXJ2YWwpIC8gKGdhbWVJbnRlcnZhbE1heCAtIGdhbWVJbnRlcnZhbE1pbikpLnRvU3RyaW5nKCkpO1xuICAgIHNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XG4gICAgICBnYW1lSW50ZXJ2YWwgPSB0b0dhbWVJbnRlcnZhbChwYXJzZUludCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZSwgMTApKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dmlld2VyUXVlcnlQcmVmaXh9ICNmaWxlLWlucHV0YCk7XG4gIGlmIChmaWxlSW5wdXQpIHtcbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgbG9hZEZpbGUpO1xuICB9XG5cbiAgY29uc3QgcmVsb2FkQnV0dG9uID0gPEhUTUxCdXR0b25FbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dmlld2VyUXVlcnlQcmVmaXh9ICNyZWxvYWQtYnV0dG9uYCk7XG4gIGlmIChyZWxvYWRCdXR0b24pIHtcbiAgICByZWxvYWRCdXR0b24ub25jbGljayA9IGxvYWRGaWxlO1xuICB9XG5cbiAgdHVyblNsaWRlciA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dmlld2VyUXVlcnlQcmVmaXh9ICN0dXJuLXNsaWRlcmApO1xuICBpZiAodHVyblNsaWRlcikge1xuICAgIHR1cm5TbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgICAgZm9yY2VVcGRhdGVUdXJuKHBhcnNlSW50KCg8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQpLnZhbHVlLCAxMCkpO1xuICAgIH0pO1xuICB9XG5cbiAgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI3BsYXktdG9nZ2xlYCk7XG4gIGlmICh0b2dnbGVCdXR0b24pIHtcbiAgICB0b2dnbGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGlmICh0aW1lcklkKSB7XG4gICAgICAgIHN0b3BBbmltYXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHByZXZCdXR0b24gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI3R1cm4tcHJldmApO1xuICBpZiAocHJldkJ1dHRvbikge1xuICAgIHByZXZCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGZvcmNlVXBkYXRlVHVybihNYXRoLm1heChuZXh0VHVybiAtIDEsIDApKTtcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgbmV4dEJ1dHRvbiA9IDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjdHVybi1uZXh0YCk7XG4gIGlmIChuZXh0QnV0dG9uKSB7XG4gICAgbmV4dEJ1dHRvbi5vbmNsaWNrID0gYWR2YW5jZUZyYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRGaWxlKCkge1xuICBzdG9wQW5pbWF0aW9uKCk7XG5cbiAgY29uc3QgaW5wdXRFbGVtZW50ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt2aWV3ZXJRdWVyeVByZWZpeH0gI2ZpbGUtaW5wdXRgKTtcbiAgaWYgKCFpbnB1dEVsZW1lbnQgfHwgIWlucHV0RWxlbWVudC5maWxlcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpbGUgPSBpbnB1dEVsZW1lbnQuZmlsZXNbMF07XG4gIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29tbWFuZHMgPSBwcmVwcm9jZXNzUmVwbGF5KEpTT04ucGFyc2UoPHN0cmluZz5yZWFkZXIucmVzdWx0KSk7XG4gICAgICBmb3JjZVVwZGF0ZVR1cm4oMCk7XG4gICAgICBzdGFydEFuaW1hdGlvbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFsZXJ0KCfjg4fjg7zjgr/jga7mupblgpnjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIJcXG7mqJnmupbjgafjga8gZ2FtZS5sb2cg44GM6Kmy5b2T44Gu5Ye65Yqb44OV44Kh44Kk44Or44Gn44GZ44CCJyk7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH07XG4gIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUsICd1dGYtOCcpO1xufVxuXG5mdW5jdGlvbiB0cnlMb2FkaW5nV2luZG93UmVwbGF5KCkge1xuICBjb25zdCByZXBsYXkgPSAoPGFueT53aW5kb3cpLnJlcGxheTtcbiAgaWYgKCFyZXBsYXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3ZpZXdlclF1ZXJ5UHJlZml4fSAjZmlsZS1pbnB1dGApO1xuICBpZiAoZmlsZUlucHV0KSB7XG4gICAgZmlsZUlucHV0LnJlbW92ZSgpO1xuICB9XG5cbiAgY29tbWFuZHMgPSBwcmVwcm9jZXNzUmVwbGF5KHJlcGxheSk7XG4gIGZvcmNlVXBkYXRlVHVybigwKTtcbiAgc3RhcnRBbmltYXRpb24oKTtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JlcGxheShyZXBsYXk6IGFueSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXBsYXkpKSB7XG4gICAgLy8gb2xkIGZvcm1hdCBsb2cgZGF0YS5cbiAgICByZXN1bHRzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgcmV0dXJuIDxUdXJuUmVjb3JkW10+cmVwbGF5O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlc3VsdCA9IDxHYW1lUmVzdWx0PnJlcGxheS5nYW1lUmVzdWx0O1xuICAgIC8vIG5ldyBmb3JtYXQgbG9nIGRhdGEuXG4gICAgaWYgKHdpbm5lclRleHQpIHtcbiAgICAgIHdpbm5lclRleHQuaW5uZXJUZXh0ID0gYFBMQVlFUiAke3Jlc3VsdC53aW5uZXJ9IFdJTlMhYDtcbiAgICB9XG4gICAgaWYgKHJlYXNvblRleHQpIHtcbiAgICAgIHJlYXNvblRleHQuaW5uZXJUZXh0ID0gcmVzdWx0LmRlZmVhdFJlYXNvbjtcbiAgICB9XG4gICAgcmVzdWx0c0F2YWlsYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDxUdXJuUmVjb3JkW10+cmVwbGF5LmNvbW1hbmRzO1xuICB9XG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICBwcmVwYXJlRmllbGQoKTtcbiAgcHJlcGFyZUJ1dHRvbnMoKTtcbiAgdHJ5TG9hZGluZ1dpbmRvd1JlcGxheSgpO1xufSk7XG4iLCJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4vQ29yZS9Cb2FyZCc7XG5pbXBvcnQgeyBCb2FyZE1hbmFnZXIgfSBmcm9tICcuL0NvcmUvQm9hcmRNYW5hZ2VyJztcbmltcG9ydCB7IFRpbGUgfSBmcm9tICcuL0NvcmUvVGlsZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tICcuL0NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgUnVubmVyQmFzZSB9IGZyb20gJy4vUnVubmVyL1J1bm5lckJhc2UnO1xuaW1wb3J0IHsgSW5wdXQsIE91dHB1dCB9IGZyb20gJy4vUnVubmVyL3R5cGVzJztcbmltcG9ydCB7IEdhbWVSZXN1bHQsIEdhbWVSZXN1bHRSZWFzb24sIFR1cm5SZWNvcmQgfSBmcm9tICcuL3R5cGVzJztcblxudHlwZSBBdHRhY2tQYXJzZVJlc3VsdCA9IHtcbiAgdmVyZGljdDogJ09LJyB8ICdORyc7XG4gIHJlYXNvbj86IEdhbWVSZXN1bHRSZWFzb247XG4gIHRpbGVzPzogVGlsZVtdO1xufTtcblxuZXhwb3J0IGNsYXNzIEdhbWVNYW5hZ2VyIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBESVJFQ1RJT05TX01BUCA9IG5ldyBNYXAoW1xuICAgIFsnVScsIERpcmVjdGlvbi5VcF0sXG4gICAgWydEJywgRGlyZWN0aW9uLkRvd25dLFxuICAgIFsnUicsIERpcmVjdGlvbi5SaWdodF0sXG4gICAgWydMJywgRGlyZWN0aW9uLkxlZnRdLFxuICBdKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBCT0FSRF9OVU1fUk9XUyA9IDU7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQk9BUkRfTlVNX0NPTFMgPSA1O1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOVElBTElaRV9USU1FX01TID0gMTAwMDtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFJTl9UVVJOX1RJTUVfTVMgPSAxMDAwO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBUT1RBTF9NQUlOX1RJTUVfTVMgPSAxMDAgKiAxMDAwO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfVFVSTiA9IDEwMDA7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUE9TSVRJVkVfUkVHRVhQID0gL15cXCswfFsxLTldXFxkKiQvO1xuXG4gIHByaXZhdGUgaW9Mb2c6IFtJbnB1dCwgT3V0cHV0XVtdID0gW107XG5cbiAgcHJpdmF0ZSByZWFkb25seSBydW5uZXJzOiBSdW5uZXJCYXNlW107XG5cbiAgY29uc3RydWN0b3IoZmlyc3RQbGF5ZXI6IFJ1bm5lckJhc2UsIHNlY29uZFBsYXllcjogUnVubmVyQmFzZSkge1xuICAgIHRoaXMucnVubmVycyA9IFtmaXJzdFBsYXllciwgc2Vjb25kUGxheWVyXTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgUEFSU0VfQVRUQUNLX0NPTU1BTkQoY29tbWFuZHM6IHN0cmluZ1tdLCBlbmVteUJvYXJkOiBCb2FyZCk6IEF0dGFja1BhcnNlUmVzdWx0IHtcbiAgICBpZiAoIWNvbW1hbmRzLmV2ZXJ5KEdhbWVNYW5hZ2VyLmlzUG9zaXRpdmVJbnRlZ2VyKSkge1xuICAgICAgcmV0dXJuIHsgdmVyZGljdDogJ05HJywgcmVhc29uOiAnUFJFU0VOVEFUSU9OX0VSUk9SJyB9O1xuICAgIH1cblxuICAgIGNvbnN0IFtNLCBWLCAuLi52ZWNdID0gY29tbWFuZHMubWFwKHYgPT4gcGFyc2VJbnQodiwgMTApKTtcblxuICAgIGlmIChNICogMiAhPT0gdmVjLmxlbmd0aCB8fCAhVikge1xuICAgICAgcmV0dXJuIHsgdmVyZGljdDogJ05HJywgcmVhc29uOiAnUFJFU0VOVEFUSU9OX0VSUk9SJyB9O1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gTWF0aC5wb3coMiwgVik7XG5cbiAgICBjb25zdCB0aWxlczogVGlsZVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNOyBpKyspIHtcbiAgICAgIGNvbnN0IFtyb3csIGNvbF0gPSB2ZWMuc2xpY2UoaSAqIDIsIGkgKiAyICsgMik7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHsgcm93OiByb3cgLSAxLCBjb2w6IGNvbCAtIDEgfTtcbiAgICAgIGlmIChlbmVteUJvYXJkLnRpbGVPY2N1cGllZChwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHsgdmVyZGljdDogJ05HJywgcmVhc29uOiAnSU5WQUxJRF9QT1NJVElPTicgfTtcbiAgICAgIH1cbiAgICAgIHRpbGVzLnB1c2gobmV3IFRpbGUocG9zaXRpb24sIHZhbHVlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdmVyZGljdDogJ09LJywgdGlsZXMgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGlzUG9zaXRpdmVJbnRlZ2VyKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIEdhbWVNYW5hZ2VyLlBPU0lUSVZFX1JFR0VYUC50ZXN0KHN0cik7XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZSBtYXgtZnVuYy1ib2R5LWxlbmd0aCBUT0RPIGZpeG1lXG4gIHB1YmxpYyBhc3luYyBnYW1lTWFpbigpIHtcbiAgICAvLyBQcmVwYXJlIGludGVybmFsIHN0YXRlXG4gICAgY29uc3QgY29uc3VtZWRUaW1lc05zID0gWzAsIDBdO1xuICAgIGxldCB0dXJuID0gMDtcbiAgICBjb25zdCBzY29yZXMgPSBbMCwgMF07XG4gICAgY29uc3QgdGltZUxlZnRzID0gW0dhbWVNYW5hZ2VyLlRPVEFMX01BSU5fVElNRV9NUywgR2FtZU1hbmFnZXIuVE9UQUxfTUFJTl9USU1FX01TXTtcbiAgICBjb25zdCBib2FyZHMgPSBbXG4gICAgICBuZXcgQm9hcmRNYW5hZ2VyKEdhbWVNYW5hZ2VyLkJPQVJEX05VTV9ST1dTLCBHYW1lTWFuYWdlci5CT0FSRF9OVU1fQ09MUyksXG4gICAgICBuZXcgQm9hcmRNYW5hZ2VyKEdhbWVNYW5hZ2VyLkJPQVJEX05VTV9ST1dTLCBHYW1lTWFuYWdlci5CT0FSRF9OVU1fQ09MUyksXG4gICAgXTtcblxuICAgIGNvbnN0IGJ1aWxkUmVzdWx0ID0gKHdpbm5lcjogbnVtYmVyLCByZWFzb246IEdhbWVSZXN1bHRSZWFzb24pOiBHYW1lUmVzdWx0ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpbm5lcjogd2lubmVyID09PSAwID8gJ0ZJUlNUJyA6ICdTRUNPTkQnLFxuICAgICAgICBkZWZlYXRSZWFzb246IHJlYXNvbixcbiAgICAgICAgdHVybixcbiAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICBmaXJzdDogeyB0aW1lOiBjb25zdW1lZFRpbWVzTnNbMF0sIHNjb3JlOiBzY29yZXNbMF0gfSxcbiAgICAgICAgICBzZWNvbmQ6IHsgdGltZTogY29uc3VtZWRUaW1lc05zWzFdLCBzY29yZTogc2NvcmVzWzFdIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBJbml0aWFsaXplXG4gICAgZm9yIChsZXQgcGxheWVyID0gMDsgcGxheWVyIDwgMjsgcGxheWVyKyspIHtcbiAgICAgIGNvbnN0IHJ1bm5lciA9IHRoaXMucnVubmVyc1twbGF5ZXJdO1xuICAgICAgY29uc3QgaW5wdXQgPSB7IGNvbW1hbmRzOiBbcGxheWVyLnRvU3RyaW5nKDEwKV0gfTtcbiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHJ1bm5lci5zZW5kQW5kUmVjZWl2ZURhdGEoaW5wdXQsIEdhbWVNYW5hZ2VyLklOVElBTElaRV9USU1FX01TKTtcblxuICAgICAgY29uc29sZS5sb2cocmV0KTtcbiAgICAgIHRoaXMuaW9Mb2cucHVzaChbaW5wdXQsIHJldF0pO1xuXG4gICAgICBjb25zdW1lZFRpbWVzTnNbcGxheWVyXSArPSByZXQucnVudGltZU5zO1xuXG4gICAgICBpZiAocmV0LnZlcmRpY3QgIT09ICdPSycpIHtcbiAgICAgICAgaWYgKHJldC52ZXJkaWN0ID09PSAnVExFJykge1xuICAgICAgICAgIHJldHVybiBidWlsZFJlc3VsdCgocGxheWVyICsgMSkgJSAyLCAnVElNRV9MSU1JVF9FWENFRURFRCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8gcmV0dXJuIG1vcmUgZGV0YWlsZWQgcmVzdWx0LlxuICAgICAgICByZXR1cm4gYnVpbGRSZXN1bHQoKHBsYXllciArIDEpICUgMiwgJ1JVTlRJTUVfRVJST1InKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVhc29uID0gKCgpID0+IHtcbiAgICAgICAgaWYgKCFyZXQub3V0cHV0KSB7XG4gICAgICAgICAgcmV0dXJuICdQUkVTRU5UQVRJT05fRVJST1InO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluaXRpYWxUaWxlID0gcmV0Lm91dHB1dC5zcGxpdCgnICcpO1xuICAgICAgICBpZiAoIWluaXRpYWxUaWxlLmV2ZXJ5KEdhbWVNYW5hZ2VyLmlzUG9zaXRpdmVJbnRlZ2VyKSkge1xuICAgICAgICAgIHJldHVybiAnUFJFU0VOVEFUSU9OX0VSUk9SJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtyb3csIGNvbF0gPSBpbml0aWFsVGlsZS5tYXAodiA9PiB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHYsIDEwKSAtIDE7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWJvYXJkc1twbGF5ZXJdLmJvYXJkLndpdGhpbkJvdW5kcyh7IHJvdywgY29sIH0pKSB7XG4gICAgICAgICAgcmV0dXJuICdJTlZBTElEX1BPU0lUSU9OJztcbiAgICAgICAgfVxuICAgICAgICBib2FyZHNbKHBsYXllciArIDEpICUgMl0uYm9hcmQuaW5zZXJ0VGlsZShuZXcgVGlsZSh7IHJvdywgY29sIH0sIDIpKTtcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pKCk7XG5cbiAgICAgIGlmIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkUmVzdWx0KChwbGF5ZXIgKyAxKSAlIDIsIHJlYXNvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2FtZSBCb2R5XG4gICAgZm9yICh0dXJuID0gMTsgdHVybiA8PSBHYW1lTWFuYWdlci5NQVhfVFVSTjsgdHVybisrKSB7XG4gICAgICBmb3IgKGxldCBwbGF5ZXIgPSAwOyBwbGF5ZXIgPCAyOyBwbGF5ZXIrKykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSB0aGlzLnJ1bm5lcnNbcGxheWVyXTtcbiAgICAgICAgY29uc3QgbXlCb2FyZCA9IGJvYXJkc1twbGF5ZXJdO1xuICAgICAgICBjb25zdCBlbmVteUJvYXJkID0gYm9hcmRzWyhwbGF5ZXIgKyAxKSAlIDJdO1xuXG4gICAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICAgIGNvbW1hbmRzOiBbXG4gICAgICAgICAgICBgJHt0dXJufSAke01hdGgucm91bmQodGltZUxlZnRzW3BsYXllcl0pfSAke3Njb3Jlc1twbGF5ZXJdfSAke3Njb3Jlc1socGxheWVyICsgMSkgJSAyXX1gLFxuICAgICAgICAgICAgbXlCb2FyZC50b1N0cmluZygpLFxuICAgICAgICAgICAgZW5lbXlCb2FyZC50b1N0cmluZygpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHJ1bm5lci5zZW5kQW5kUmVjZWl2ZURhdGEoaW5wdXQsIEdhbWVNYW5hZ2VyLk1BSU5fVFVSTl9USU1FX01TKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhyZXQpO1xuICAgICAgICB0aGlzLmlvTG9nLnB1c2goW2lucHV0LCByZXRdKTtcblxuICAgICAgICBjb25zdW1lZFRpbWVzTnNbcGxheWVyXSArPSByZXQucnVudGltZU5zO1xuXG4gICAgICAgIGlmIChyZXQudmVyZGljdCAhPT0gJ09LJykge1xuICAgICAgICAgIGlmIChyZXQudmVyZGljdCA9PT0gJ1RMRScpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZFJlc3VsdCgocGxheWVyICsgMSkgJSAyLCAnVElNRV9MSU1JVF9FWENFRURFRCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYnVpbGRSZXN1bHQoKHBsYXllciArIDEpICUgMiwgJ1JVTlRJTUVfRVJST1InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIFJldHVybiBWYWx1ZVxuICAgICAgICBjb25zdCByZWFzb24gPSAoKCkgPT4ge1xuICAgICAgICAgIGlmICghcmV0Lm91dHB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICdQUkVTRU5UQVRJT05fRVJST1InO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBbY29tbWFuZCwgLi4uYXR0YWNrXSA9IHJldC5vdXRwdXQuc3BsaXQoJyAnKTtcbiAgICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybiAnUFJFU0VOVEFUSU9OX0VSUk9SJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBNb3ZlXG4gICAgICAgICAgY29uc3QgZGlyQ29tbWFuZCA9IEdhbWVNYW5hZ2VyLkRJUkVDVElPTlNfTUFQLmdldChjb21tYW5kKTtcbiAgICAgICAgICBpZiAoIWRpckNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRF9ESVJFQ1RJT04nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBtb3ZlZFJlc3VsdCA9IG15Qm9hcmQubW92ZShkaXJDb21tYW5kKTtcbiAgICAgICAgICBpZiAoIW1vdmVkUmVzdWx0Lm1vdmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0lOVkFMSURfRElSRUNUSU9OJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBdHRhY2tcbiAgICAgICAgICBjb25zdCBwYXJzZWQgPSBHYW1lTWFuYWdlci5QQVJTRV9BVFRBQ0tfQ09NTUFORChhdHRhY2ssIGVuZW15Qm9hcmQuYm9hcmQpO1xuICAgICAgICAgIGlmIChwYXJzZWQudmVyZGljdCAhPT0gJ09LJyB8fCAhcGFyc2VkLnRpbGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkLnJlYXNvbiB8fCAnUFJFU0VOVEFUSU9OX0VSUk9SJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgdXNlZFZhbHVlID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IHRpbGUgb2YgcGFyc2VkLnRpbGVzKSB7XG4gICAgICAgICAgICBpZiAoZW5lbXlCb2FyZC5ib2FyZC50aWxlQXQoeyByb3c6IHRpbGUucm93LCBjb2w6IHRpbGUuY29sIH0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRF9QTEFDRV9UT19QVVQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5lbXlCb2FyZC5ib2FyZC5pbnNlcnRUaWxlKHRpbGUpO1xuICAgICAgICAgICAgdXNlZFZhbHVlICs9IHRpbGUudmFsdWUgfHwgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXNlZFZhbHVlICE9PSBNYXRoLnBvdygyLCBtb3ZlZFJlc3VsdC5jb3VudE1lcmdlZCArIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0lOVkFMSURfVkFMVUVfVE9fUFVUJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY29yZXNbcGxheWVyXSArPSBtb3ZlZFJlc3VsdC5zY29yZU9idGFpbmVkO1xuICAgICAgICAgIHRpbWVMZWZ0c1twbGF5ZXJdIC09IHJldC5ydW50aW1lTnMgLyAxMDAwIC8gMTAwMDtcblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIGlmIChyZWFzb24pIHtcbiAgICAgICAgICByZXR1cm4gYnVpbGRSZXN1bHQoKHBsYXllciArIDEpICUgMiwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBwbGF5ZXJcbiAgICB9IC8vIHR1cm5cblxuICAgIC8vIHZlcmRpY3QgYnkgc2NvcmVcbiAgICBpZiAoc2NvcmVzWzBdID4gc2NvcmVzWzFdKSB7XG4gICAgICByZXR1cm4gYnVpbGRSZXN1bHQoMCwgJ1NDT1JFJyk7XG4gICAgfSBlbHNlIGlmIChzY29yZXNbMV0gPiBzY29yZXNbMF0pIHtcbiAgICAgIHJldHVybiBidWlsZFJlc3VsdCgxLCAnU0NPUkUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1aWxkUmVzdWx0KDEsICdFVkVOX1NDT1JFJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHdyaXRlTG9nc1RvRmlsZShmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52LlJVTlRJTUUgPT09ICdub2RlJykge1xuICAgICAgY29uc3Qgd3JpdGVyID0gcmVxdWlyZSgnZnMnKS5jcmVhdGVXcml0ZVN0cmVhbShmaWxlTmFtZSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmUgbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICB3cml0ZXIuc2V0RGVmYXVsdEVuY29kaW5nKCd1dGYtOCcpO1xuICAgICAgY29uc3QgbG9nTGlzdCA9IHRoaXMuaW9Mb2cubWFwKFxuICAgICAgICAoW2lucHV0LCBvdXRwdXRdLCB0dXJuKTogVHVyblJlY29yZCA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBsYXllckluZGV4OiB0dXJuICUgMiA9PT0gMCA/IDAgOiAxLFxuICAgICAgICAgICAgcnVudGltZTogb3V0cHV0LnJ1bnRpbWVOcyAvIDEwMDAgLyAxMDAwIHx8IDAsXG4gICAgICAgICAgICBhaWlucHV0OiBpbnB1dC5jb21tYW5kcy5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgIGFpb3V0cHV0OiBvdXRwdXQub3V0cHV0LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB3cml0ZXIud3JpdGUoSlNPTi5zdHJpbmdpZnkobG9nTGlzdCkpO1xuICAgICAgd3JpdGVyLmVuZCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4uLy4uL2dhbWUvc3JjL0NvcmUvVGlsZSc7XG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2dhbWUvc3JjL0NvcmUvdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgSFRNTEFjdHVhdG9yIHtcbiAgcHJpdmF0ZSByZWFkb25seSB0aWxlQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcih0aWxlQ29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMudGlsZUNvbnRhaW5lciA9IHRpbGVDb250YWluZXI7XG4gIH1cblxuICBwdWJsaWMgYWN0dWF0ZShncmlkOiBUaWxlW11bXSkge1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnRpbGVDb250YWluZXIpO1xuXG4gICAgICBncmlkLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgY29sdW1uLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGlsZShjZWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJDb250YWluZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYWRkVGlsZSh0aWxlOiBUaWxlKSB7XG4gICAgaWYgKCF0aWxlLnZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aWxlLnByZXZpb3VzUG9zaXRpb24gfHwgeyByb3c6IHRpbGUucm93LCBjb2w6IHRpbGUuY29sIH07XG4gICAgY29uc3QgcG9zaXRpb25DbGFzcyA9IHRoaXMucG9zaXRpb25DbGFzcyhwb3NpdGlvbik7XG5cbiAgICAvLyBXZSBjYW4ndCB1c2UgY2xhc3NsaXN0IGJlY2F1c2UgaXQgc29tZWhvdyBnbGl0Y2hlcyB3aGVuIHJlcGxhY2luZyBjbGFzc2VzXG4gICAgY29uc3QgY2xhc3NlcyA9IFsndGlsZScsIGB0aWxlLSR7dGlsZS52YWx1ZX1gLCBwb3NpdGlvbkNsYXNzXTtcblxuICAgIGlmICh0aWxlLnZhbHVlID4gMjA0OCkge1xuICAgICAgY2xhc3Nlcy5wdXNoKCd0aWxlLXN1cGVyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBseUNsYXNzZXMod3JhcHBlciwgY2xhc3Nlcyk7XG5cbiAgICBpbm5lci5jbGFzc0xpc3QuYWRkKCd0aWxlLWlubmVyJyk7XG4gICAgaW5uZXIudGV4dENvbnRlbnQgPSB0aWxlLnZhbHVlLnRvU3RyaW5nKDEwKTtcblxuICAgIGlmICh0aWxlLnByZXZpb3VzUG9zaXRpb24pIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSB0aWxlIGdldHMgcmVuZGVyZWQgaW4gdGhlIHByZXZpb3VzIHBvc2l0aW9uIGZpcnN0XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY2xhc3Nlc1syXSA9IHRoaXMucG9zaXRpb25DbGFzcyh7IHJvdzogdGlsZS5yb3csIGNvbDogdGlsZS5jb2wgfSk7XG4gICAgICAgIHRoaXMuYXBwbHlDbGFzc2VzKHdyYXBwZXIsIGNsYXNzZXMpOyAvLyBVcGRhdGUgdGhlIHBvc2l0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRpbGUubWVyZ2VkRnJvbSkge1xuICAgICAgY2xhc3Nlcy5wdXNoKCd0aWxlLW1lcmdlZCcpO1xuICAgICAgdGhpcy5hcHBseUNsYXNzZXMod3JhcHBlciwgY2xhc3Nlcyk7XG5cbiAgICAgIC8vIFJlbmRlciB0aGUgdGlsZXMgdGhhdCBtZXJnZWRcbiAgICAgIHRpbGUubWVyZ2VkRnJvbS5mb3JFYWNoKG1lcmdlZCA9PiB7XG4gICAgICAgIHRoaXMuYWRkVGlsZShtZXJnZWQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzZXMucHVzaCgndGlsZS1uZXcnKTtcbiAgICAgIHRoaXMuYXBwbHlDbGFzc2VzKHdyYXBwZXIsIGNsYXNzZXMpO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgaW5uZXIgcGFydCBvZiB0aGUgdGlsZSB0byB0aGUgd3JhcHBlclxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuXG4gICAgLy8gUHV0IHRoZSB0aWxlIG9uIHRoZSBib2FyZFxuICAgIHRoaXMudGlsZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgcG9zaXRpb25DbGFzcyhwb3NpdGlvbjogUG9zaXRpb24pIHtcbiAgICByZXR1cm4gYHRpbGUtcG9zaXRpb24tJHtwb3NpdGlvbi5jb2wgKyAxfS0ke3Bvc2l0aW9uLnJvdyArIDF9YDtcbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlDbGFzc2VzKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjbGFzc2VzOiBzdHJpbmdbXSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzZXMuam9pbignICcpKTtcbiAgfVxufVxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFpbi5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFpbi5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYnV0dGxlLTIwNDgtdmlld2VyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJhY2tncm91bmQ6ICNmYWY4ZWY7XFxuICBjb2xvcjogIzc3NmU2NTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgZm9udC1zaXplOiAxMHB4OyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyICoge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIGRpdiB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGxpbmUtaGVpZ2h0OiAxO1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxuICAgIHRleHQtc2hhZG93OiBub25lOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC5nYW1lIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXdlaWdodDogYm9sZDsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAucGxheWVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5wbGF5ZXIgLmhlYWRlciB7XFxuICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgY29sb3I6ICNiYmFkYTA7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnR1cm4tcGxheWVyIC5oZWFkZXIge1xcbiAgICBjb2xvcjogIzc3NmU2NTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuc3RhdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgd2lkdGg6IDMwMHB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xcbiAgICBmb250LXNpemU6IDE1cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxuICAgIC5idXR0bGUtMjA0OC12aWV3ZXIgLnN0YXRzIC5sYWJlbCB7XFxuICAgICAgbWFyZ2luLXRvcDogNTBweDtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgIGNvbG9yOiAjYmJhZGEwOyB9XFxuICAgIC5idXR0bGUtMjA0OC12aWV3ZXIgLnN0YXRzICN0dXJuIHtcXG4gICAgICBmb250LXNpemU6IDMwcHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuc3RhdHMgLnNjb3JlLFxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5zdGF0cyAudGltZS1sZWZ0IHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgZm9udC1zaXplOiAzMHB4OyB9XFxuICAgICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuc3RhdHMgLnNjb3JlIGRpdixcXG4gICAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5zdGF0cyAudGltZS1sZWZ0IGRpdiB7XFxuICAgICAgICBmbGV4LWJhc2lzOiA1MCU7XFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnJlc3VsdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTogMjBweDtcXG4gICAgei1pbmRleDogMTAwO1xcbiAgICBwYWRkaW5nOiAxNXB4IDIwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDIuNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExOSwgMTEwLCAxMDEsIDAuOTUpO1xcbiAgICBjb2xvcjogI2ZhZjhlZjsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5yZXN1bHRzICN3aW5uZXIge1xcbiAgICAgIGZvbnQtc2l6ZTogMzBweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5yZXN1bHRzICNyZWFzb24ge1xcbiAgICAgIG1hcmdpbi10b3A6IDVweDtcXG4gICAgICBmb250LXNpemU6IDE1cHg7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnJlc3VsdHMtc2hvdyB7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uOiBwb3AgMjAwbXMgZWFzZSAxMDBtcztcXG4gICAgLW1vei1hbmltYXRpb246IHBvcCAyMDBtcyBlYXNlIDEwMG1zO1xcbiAgICBhbmltYXRpb246IHBvcCAyMDBtcyBlYXNlIDEwMG1zO1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkcztcXG4gICAgLW1vei1hbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7XFxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkczsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAucmVzdWx0cy1oaWRlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC5pbnB1dHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgY29sb3I6ICMwMDA7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuaW5wdXRzIGJ1dHRvbixcXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuaW5wdXRzIGlucHV0IHtcXG4gICAgICBtYXJnaW46IDIuNXB4O1xcbiAgICAgIGZvbnQtc2l6ZTogMTBweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5pbnB1dHMgI3R1cm4tc2xpZGVyIHtcXG4gICAgICBmbGV4LWdyb3c6IDE7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLmJvYXJkLWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAgIC1tcy10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1tcy10b3VjaC1hY3Rpb246IG5vbmU7XFxuICAgIHRvdWNoLWFjdGlvbjogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogI2JiYWRhMDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogNDAwcHg7XFxuICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC5ncmlkLWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogMTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuZ3JpZC1yb3cge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XFxuICAgIC5idXR0bGUtMjA0OC12aWV3ZXIgLmdyaWQtcm93Omxhc3QtY2hpbGQge1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAuZ3JpZC1yb3c6YWZ0ZXIge1xcbiAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIGNsZWFyOiBib3RoOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC5ncmlkLWNlbGwge1xcbiAgICB3aWR0aDogNjhweDtcXG4gICAgaGVpZ2h0OiA2OHB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICBib3JkZXItcmFkaXVzOiAyLjVweDtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyMzgsIDIyOCwgMjE4LCAwLjM1KTsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC5ncmlkLWNlbGw6bGFzdC1jaGlsZCB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAwOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogMjsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZSxcXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUgLnRpbGUtaW5uZXIge1xcbiAgICB3aWR0aDogNjhweDtcXG4gICAgaGVpZ2h0OiA2OHB4O1xcbiAgICBsaW5lLWhlaWdodDogNjhweDsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTEtMSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAwcHgpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMHB4KTtcXG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAwcHgpOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtcG9zaXRpb24tMS0yIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDc4cHgpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNzhweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDc4cHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDc4cHgpOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtcG9zaXRpb24tMS0zIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDE1NnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDE1NnB4KTtcXG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMTU2cHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDE1NnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTEtNCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAyMzRweCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAyMzRweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDIzNHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAyMzRweCk7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS1wb3NpdGlvbi0xLTUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMzEycHgpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMzEycHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCAzMTJweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgMzEycHgpOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtcG9zaXRpb24tMi0xIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAwcHgpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDBweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAwcHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAwcHgpOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtcG9zaXRpb24tMi0yIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCA3OHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCA3OHB4KTtcXG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDc4cHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCA3OHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTItMyB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNzhweCwgMTU2cHgpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDE1NnB4KTtcXG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDE1NnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNzhweCwgMTU2cHgpOyB9XFxuICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtcG9zaXRpb24tMi00IHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAyMzRweCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoNzhweCwgMjM0cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNzhweCwgMjM0cHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAyMzRweCk7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS1wb3NpdGlvbi0yLTUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDMxMnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAzMTJweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAzMTJweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDc4cHgsIDMxMnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTMtMSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDBweCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDBweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgMHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDBweCk7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS1wb3NpdGlvbi0zLTIge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDE1NnB4LCA3OHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgNzhweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgNzhweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDE1NnB4LCA3OHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTMtMyB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDE1NnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgMTU2cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDE1NnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDE1NnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTMtNCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDIzNHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgMjM0cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDIzNHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDIzNHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTMtNSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDMxMnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNTZweCwgMzEycHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDMxMnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTU2cHgsIDMxMnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTQtMSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDBweCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDBweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgMHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDBweCk7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS1wb3NpdGlvbi00LTIge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDIzNHB4LCA3OHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgNzhweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgNzhweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDIzNHB4LCA3OHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTQtMyB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDE1NnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgMTU2cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDE1NnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDE1NnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTQtNCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDIzNHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgMjM0cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDIzNHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDIzNHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTQtNSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDMxMnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgyMzRweCwgMzEycHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDMxMnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjM0cHgsIDMxMnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTUtMSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDBweCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDBweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgMHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDBweCk7IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS1wb3NpdGlvbi01LTIge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDMxMnB4LCA3OHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgNzhweCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgNzhweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDMxMnB4LCA3OHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTUtMyB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDE1NnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgMTU2cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDE1NnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDE1NnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTUtNCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDIzNHB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgMjM0cHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDIzNHB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDIzNHB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXBvc2l0aW9uLTUtNSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDMxMnB4KTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMTJweCwgMzEycHgpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDMxMnB4KTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMzEycHgsIDMxMnB4KTsgfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAxMDBtcyBlYXNlLWluLW91dDtcXG4gICAgLW1vei10cmFuc2l0aW9uOiAxMDBtcyBlYXNlLWluLW91dDtcXG4gICAgdHJhbnNpdGlvbjogMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICAgIC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogLXdlYmtpdC10cmFuc2Zvcm07XFxuICAgIC1tb3otdHJhbnNpdGlvbi1wcm9wZXJ0eTogLW1vei10cmFuc2Zvcm07XFxuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybTsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlIC50aWxlLWlubmVyIHtcXG4gICAgICBib3JkZXItcmFkaXVzOiAyLjVweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWVlNGRhO1xcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICB6LWluZGV4OiAxMDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtMiAudGlsZS1pbm5lciB7XFxuICAgICAgYmFja2dyb3VuZDogI2VlZTRkYTtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMzBweCAxMHB4IHJnYmEoMjQzLCAyMTUsIDExNiwgMCksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApO1xcbiAgICAgIGZvbnQtc2l6ZTogNDUuMzMzMzNweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtNCAudGlsZS1pbm5lciB7XFxuICAgICAgYmFja2dyb3VuZDogI2VlZTFjOTtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMzBweCAxMHB4IHJnYmEoMjQzLCAyMTUsIDExNiwgMCksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApO1xcbiAgICAgIGZvbnQtc2l6ZTogNDUuMzMzMzNweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtOCAudGlsZS1pbm5lciB7XFxuICAgICAgY29sb3I6ICNmOWY2ZjI7XFxuICAgICAgYmFja2dyb3VuZDogI2YzYjI3YTtcXG4gICAgICBmb250LXNpemU6IDQ1LjMzMzMzcHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTE2IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZjY5NjY0O1xcbiAgICAgIGZvbnQtc2l6ZTogNDUuMzMzMzNweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtMzIgLnRpbGUtaW5uZXIge1xcbiAgICAgIGNvbG9yOiAjZjlmNmYyO1xcbiAgICAgIGJhY2tncm91bmQ6ICNmNzdjNWY7XFxuICAgICAgZm9udC1zaXplOiA0NS4zMzMzM3B4OyB9XFxuICAgIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS02NCAudGlsZS1pbm5lciB7XFxuICAgICAgY29sb3I6ICNmOWY2ZjI7XFxuICAgICAgYmFja2dyb3VuZDogI2Y3NWYzYjtcXG4gICAgICBmb250LXNpemU6IDQ1LjMzMzMzcHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTEyOCAudGlsZS1pbm5lciB7XFxuICAgICAgY29sb3I6ICNmOWY2ZjI7XFxuICAgICAgYmFja2dyb3VuZDogI2VkZDA3MztcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMzBweCAxMHB4IHJnYmEoMjQzLCAyMTUsIDExNiwgMC4xMzg4ODkpLCBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4MzMzMzMpO1xcbiAgICAgIGZvbnQtc2l6ZTogMzRweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtMjU2IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWRjYzYyO1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAzMHB4IDEwcHggcmdiYSgyNDMsIDIxNSwgMTE2LCAwLjE4NTE4NSksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTExMTExKTtcXG4gICAgICBmb250LXNpemU6IDM0cHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTUxMiAudGlsZS1pbm5lciB7XFxuICAgICAgY29sb3I6ICNmOWY2ZjI7XFxuICAgICAgYmFja2dyb3VuZDogI2VkYzk1MDtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMzBweCAxMHB4IHJnYmEoMjQzLCAyMTUsIDExNiwgMC4yMzE0ODEpLCBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzODg4OSk7XFxuICAgICAgZm9udC1zaXplOiAzNHB4OyB9XFxuICAgIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUudGlsZS0xMDI0IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWRjNTNmO1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAzMHB4IDEwcHggcmdiYSgyNDMsIDIxNSwgMTE2LCAwLjI3Nzc3OCksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTY2NjY3KTtcXG4gICAgICBmb250LXNpemU6IDI3LjJweDsgfVxcbiAgICAuYnV0dGxlLTIwNDgtdmlld2VyIC50aWxlLnRpbGUtMjA0OCAudGlsZS1pbm5lciB7XFxuICAgICAgY29sb3I6ICNmOWY2ZjI7XFxuICAgICAgYmFja2dyb3VuZDogI2VkYzIyZTtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMzBweCAxMHB4IHJnYmEoMjQzLCAyMTUsIDExNiwgMC4zMjQwNzQpLCBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE5NDQ0NCk7XFxuICAgICAgZm9udC1zaXplOiAyNy4ycHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTQwOTYgLnRpbGUtaW5uZXIge1xcbiAgICAgIGNvbG9yOiAjZjlmNmYyO1xcbiAgICAgIGJhY2tncm91bmQ6ICNlZGMyMmU7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDMwcHggMTBweCByZ2JhKDI0MywgMjE1LCAxMTYsIDAuMzcwMzcpLCBpbnNldCAwIDAgMCAxcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIyMjIyMik7XFxuICAgICAgZm9udC1zaXplOiAyNy4ycHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTgxOTIgLnRpbGUtaW5uZXIge1xcbiAgICAgIGNvbG9yOiAjZjlmNmYyO1xcbiAgICAgIGJhY2tncm91bmQ6ICNlZGMyMmU7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDMwcHggMTBweCByZ2JhKDI0MywgMjE1LCAxMTYsIDAuNDE2NjY3KSwgaW5zZXQgMCAwIDAgMXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSk7XFxuICAgICAgZm9udC1zaXplOiAyNy4ycHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTE2Mzg0IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWRjMjJlO1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAzMHB4IDEwcHggcmdiYSgyNDMsIDIxNSwgMTE2LCAwLjQ2Mjk2MyksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjc3Nzc4KTtcXG4gICAgICBmb250LXNpemU6IDIyLjY2NjY3cHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTMyNzY4IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWRjMjJlO1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAzMHB4IDEwcHggcmdiYSgyNDMsIDIxNSwgMTE2LCAwLjUwOTI1OSksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzA1NTU2KTtcXG4gICAgICBmb250LXNpemU6IDIyLjY2NjY3cHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLTY1NTM2IC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZWRjMjJlO1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAzMHB4IDEwcHggcmdiYSgyNDMsIDIxNSwgMTE2LCAwLjU1NTU1NiksIGluc2V0IDAgMCAwIDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMzMzMzMzKTtcXG4gICAgICBmb250LXNpemU6IDIyLjY2NjY3cHg7IH1cXG4gICAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS50aWxlLXN1cGVyIC50aWxlLWlubmVyIHtcXG4gICAgICBjb2xvcjogI2Y5ZjZmMjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjM2MzYTMzO1xcbiAgICAgIGZvbnQtc2l6ZTogMzBweDsgfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBhcHBlYXIge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7IH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH0gfVxcblxcbkAtbW96LWtleWZyYW1lcyBhcHBlYXIge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7IH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH0gfVxcblxcbkBrZXlmcmFtZXMgYXBwZWFyIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyB9IH1cXG4gIC5idXR0bGUtMjA0OC12aWV3ZXIgLnRpbGUtbmV3IC50aWxlLWlubmVyIHtcXG4gICAgLXdlYmtpdC1hbmltYXRpb246IGFwcGVhciAyMDBtcyBlYXNlIDEwMG1zO1xcbiAgICAtbW96LWFuaW1hdGlvbjogYXBwZWFyIDIwMG1zIGVhc2UgMTAwbXM7XFxuICAgIGFuaW1hdGlvbjogYXBwZWFyIDIwMG1zIGVhc2UgMTAwbXM7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzO1xcbiAgICAtbW96LWFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkcztcXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzOyB9XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIHBvcCB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7IH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH0gfVxcblxcbkAtbW96LWtleWZyYW1lcyBwb3Age1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7IH1cXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMS4yKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMS4yKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpOyB9XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHBvcCB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7IH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIC1tb3otdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgLW1zLXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH0gfVxcbiAgLmJ1dHRsZS0yMDQ4LXZpZXdlciAudGlsZS1tZXJnZWQgLnRpbGUtaW5uZXIge1xcbiAgICB6LWluZGV4OiAyMDtcXG4gICAgLXdlYmtpdC1hbmltYXRpb246IHBvcCAyMDBtcyBlYXNlIDEwMG1zO1xcbiAgICAtbW96LWFuaW1hdGlvbjogcG9wIDIwMG1zIGVhc2UgMTAwbXM7XFxuICAgIGFuaW1hdGlvbjogcG9wIDIwMG1zIGVhc2UgMTAwbXM7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzO1xcbiAgICAtbW96LWFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkcztcXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==